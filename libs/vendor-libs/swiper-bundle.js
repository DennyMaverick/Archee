"use strict";function _defineProperty(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(a="Object"===a&&e.constructor?e.constructor.name:a)||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,r=new Array(t);a<t;a++)r[a]=e[a];return r}function _defineProperties(e,t){for(var a=0;a<t.length;a++){var r=t[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _createClass(e,t,a){return t&&_defineProperties(e.prototype,t),a&&_defineProperties(e,a),Object.defineProperty(e,"prototype",{writable:!1}),e}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_setPrototypeOf(e,t)}function _createSuper(a){var r=_isNativeReflectConstruct();return function(){var e,t=_getPrototypeOf(a);return _possibleConstructorReturn(this,r?(e=_getPrototypeOf(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments))}}function _possibleConstructorReturn(e,t){if(t&&("object"===_typeof(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(e)}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _wrapNativeSuper(e){var a="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(e){if(null===e||!_isNativeFunction(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==a){if(a.has(e))return a.get(e);a.set(e,t)}function t(){return _construct(e,arguments,_getPrototypeOf(this).constructor)}return t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(t,e)})(e)}function _construct(e,t,a){return(_construct=_isNativeReflectConstruct()?Reflect.construct:function(e,t,a){var r=[null];r.push.apply(r,t);r=new(Function.bind.apply(e,r));return a&&_setPrototypeOf(r,a.prototype),r}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}function _isNativeFunction(e){return-1!==Function.toString.call(e).indexOf("[native code]")}function _setPrototypeOf(e,t){return(_setPrototypeOf=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function _getPrototypeOf(e){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).Swiper=t()}(void 0,function(){function i(e){return null!==e&&"object"===_typeof(e)&&"constructor"in e&&e.constructor===Object}function s(e,t){var a=0<arguments.length&&void 0!==e?e:{},r=1<arguments.length&&void 0!==t?t:{};Object.keys(r).forEach(function(e){void 0===a[e]?a[e]=r[e]:i(r[e])&&i(a[e])&&0<Object.keys(r[e]).length&&s(a[e],r[e])})}var t={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function T(){var e="undefined"!=typeof document?document:{};return s(e,t),e}var a={document:t,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function O(){var e="undefined"!=typeof window?window:{};return s(e,a),e}var d=function(){_inherits(i,_wrapNativeSuper(Array));var r=_createSuper(i);function i(e){var t,a;return _classCallCheck(this,i),t=r.call.apply(r,[this].concat(_toConsumableArray(e||[]))),e=_assertThisInitialized(t),a=e.__proto__,Object.defineProperty(e,"__proto__",{get:function(){return a},set:function(e){a.__proto__=e}}),t}return _createClass(i)}();function n(e){var t=[];return(0<arguments.length&&void 0!==e?e:[]).forEach(function(e){Array.isArray(e)?t.push.apply(t,_toConsumableArray(n(e))):t.push(e)}),t}function o(e,t){return Array.prototype.filter.call(e,t)}function I(e,t){var a=O(),r=T(),i=[];if(!t&&e instanceof d)return e;if(!e)return new d(i);if("string"==typeof e){var s=e.trim();if(0<=s.indexOf("<")&&0<=s.indexOf(">")){var n="div";0===s.indexOf("<li")&&(n="ul"),0===s.indexOf("<tr")&&(n="tbody"),0!==s.indexOf("<td")&&0!==s.indexOf("<th")||(n="tr"),0===s.indexOf("<tbody")&&(n="table"),0===s.indexOf("<option")&&(n="select");var o=r.createElement(n);o.innerHTML=s;for(var l=0;l<o.childNodes.length;l+=1)i.push(o.childNodes[l])}else i=function(e,t){if("string"!=typeof e)return[e];for(var a=[],r=t.querySelectorAll(e),i=0;i<r.length;i+=1)a.push(r[i]);return a}(e.trim(),t||r)}else if(e.nodeType||e===a||e===r)i.push(e);else if(Array.isArray(e)){if(e instanceof d)return e;i=e}return new d(function(e){for(var t=[],a=0;a<e.length;a+=1)-1===t.indexOf(e[a])&&t.push(e[a]);return t}(i))}I.fn=d.prototype;var r,l,c,p={addClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var r=n(t.map(function(e){return e.split(" ")}));return this.forEach(function(e){(e=e.classList).add.apply(e,_toConsumableArray(r))}),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var r=n(t.map(function(e){return e.split(" ")}));return this.forEach(function(e){(e=e.classList).remove.apply(e,_toConsumableArray(r))}),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var r=n(t.map(function(e){return e.split(" ")}));return 0<o(this,function(t){return 0<r.filter(function(e){return t.classList.contains(e)}).length}).length},toggleClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var r=n(t.map(function(e){return e.split(" ")}));this.forEach(function(t){r.forEach(function(e){t.classList.toggle(e)})})},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var a=0;a<this.length;a+=1)if(2===arguments.length)this[a].setAttribute(e,t);else for(var r in e)this[a][r]=e[r],this[a].setAttribute(r,e[r]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transitionDuration="string"!=typeof e?"".concat(e,"ms"):e;return this},on:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var r=t[0],s=t[1],n=t[2],i=t[3];function o(e){var t=e.target;if(t){var a=e.target.dom7EventData||[];if(a.indexOf(e)<0&&a.unshift(e),I(t).is(s))n.apply(t,a);else for(var r=I(t).parents(),i=0;i<r.length;i+=1)I(r[i]).is(s)&&n.apply(r[i],a)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),n.apply(this,t)}"function"==typeof t[1]&&(r=t[0],n=t[1],i=t[2],s=void 0);for(var d,i=i||!1,c=r.split(" "),p=0;p<this.length;p+=1){var u=this[p];if(s)for(d=0;d<c.length;d+=1){var f=c[d];u.dom7LiveListeners||(u.dom7LiveListeners={}),u.dom7LiveListeners[f]||(u.dom7LiveListeners[f]=[]),u.dom7LiveListeners[f].push({listener:n,proxyListener:o}),u.addEventListener(f,o,i)}else for(d=0;d<c.length;d+=1){var h=c[d];u.dom7Listeners||(u.dom7Listeners={}),u.dom7Listeners[h]||(u.dom7Listeners[h]=[]),u.dom7Listeners[h].push({listener:n,proxyListener:l}),u.addEventListener(h,l,i)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];var r=t[0],i=t[1],s=t[2],n=t[3];"function"==typeof t[1]&&(r=t[0],s=t[1],n=t[2],i=void 0);for(var n=n||!1,o=r.split(" "),l=0;l<o.length;l+=1)for(var d=o[l],c=0;c<this.length;c+=1){var p=this[c],u=void 0;if(!i&&p.dom7Listeners?u=p.dom7Listeners[d]:i&&p.dom7LiveListeners&&(u=p.dom7LiveListeners[d]),u&&u.length)for(var f=u.length-1;0<=f;--f){var h=u[f];(!s||h.listener!==s)&&!(s&&h.listener&&h.listener.dom7proxy&&h.listener.dom7proxy===s)&&s||(p.removeEventListener(d,h.proxyListener,n),u.splice(f,1))}}return this},trigger:function(){for(var e=O(),t=arguments.length,a=new Array(t),r=0;r<t;r++)a[r]=arguments[r];for(var i=a[0].split(" "),s=a[1],n=0;n<i.length;n+=1)for(var o=i[n],l=0;l<this.length;l+=1){var d,c=this[l];e.CustomEvent&&(d=new e.CustomEvent(o,{detail:s,bubbles:!0,cancelable:!0}),c.dom7EventData=a.filter(function(e,t){return 0<t}),c.dispatchEvent(d),c.dom7EventData=[],delete c.dom7EventData)}return this},transitionEnd:function(a){var r=this;return a&&r.on("transitionend",function e(t){t.target===this&&(a.call(this,t),r.off("transitionend",e))}),this},outerWidth:function(e){if(0<this.length){if(e){e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){var e=O();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(0<this.length){var e=O(),t=T(),a=this[0],r=a.getBoundingClientRect(),i=t.body,s=a.clientTop||i.clientTop||0,t=a.clientLeft||i.clientLeft||0,i=a===e?e.scrollY:a.scrollTop,a=a===e?e.scrollX:a.scrollLeft;return{top:r.top+i-s,left:r.left+a-t}}return null},css:function(e,t){var a,r=O();if(1===arguments.length){if("string"!=typeof e){for(a=0;a<this.length;a+=1)for(var i in e)this[a].style[i]=e[i];return this}if(this[0])return r.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(a=0;a<this.length;a+=1)this[a].style[e]=t;return this},each:function(a){return a&&this.forEach(function(e,t){a.apply(e,[e,t])}),this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,a,r=O(),i=T(),s=this[0];if(!s||void 0===e)return!1;if("string"==typeof e){if(s.matches)return s.matches(e);if(s.webkitMatchesSelector)return s.webkitMatchesSelector(e);if(s.msMatchesSelector)return s.msMatchesSelector(e);for(t=I(e),a=0;a<t.length;a+=1)if(t[a]===s)return!0;return!1}if(e===i)return s===i;if(e===r)return s===r;if(e.nodeType||e instanceof d){for(t=e.nodeType?[e]:e,a=0;a<t.length;a+=1)if(t[a]===s)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(t-1<e)return I([]);if(e<0){t=t+e;return t<0?I([]):I([this[t]])}return I([this[e]])},append:function(){for(var e=T(),t=0;t<arguments.length;t+=1)for(var a=t<0||arguments.length<=t?void 0:arguments[t],r=0;r<this.length;r+=1)if("string"==typeof a){var i=e.createElement("div");for(i.innerHTML=a;i.firstChild;)this[r].appendChild(i.firstChild)}else if(a instanceof d)for(var s=0;s<a.length;s+=1)this[r].appendChild(a[s]);else this[r].appendChild(a);return this},prepend:function(e){for(var t,a=T(),r=0;r<this.length;r+=1)if("string"==typeof e){var i=a.createElement("div");for(i.innerHTML=e,t=i.childNodes.length-1;0<=t;--t)this[r].insertBefore(i.childNodes[t],this[r].childNodes[0])}else if(e instanceof d)for(t=0;t<e.length;t+=1)this[r].insertBefore(e[t],this[r].childNodes[0]);else this[r].insertBefore(e,this[r].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&I(this[0].nextElementSibling).is(e)?I([this[0].nextElementSibling]):I([]):this[0].nextElementSibling?I([this[0].nextElementSibling]):I([]):I([])},nextAll:function(e){var t=[],a=this[0];if(!a)return I([]);for(;a.nextElementSibling;){var r=a.nextElementSibling;(!e||I(r).is(e))&&t.push(r),a=r}return I(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&I(t.previousElementSibling).is(e)?I([t.previousElementSibling]):I([]):t.previousElementSibling?I([t.previousElementSibling]):I([])}return I([])},prevAll:function(e){var t=[],a=this[0];if(!a)return I([]);for(;a.previousElementSibling;){var r=a.previousElementSibling;(!e||I(r).is(e))&&t.push(r),a=r}return I(t)},parent:function(e){for(var t=[],a=0;a<this.length;a+=1)null===this[a].parentNode||e&&!I(this[a].parentNode).is(e)||t.push(this[a].parentNode);return I(t)},parents:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var r=this[a].parentNode;r;)e&&!I(r).is(e)||t.push(r),r=r.parentNode;return I(t)},closest:function(e){var t=this;return void 0===e?I([]):t.is(e)?t:t.parents(e).eq(0)},find:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var r=this[a].querySelectorAll(e),i=0;i<r.length;i+=1)t.push(r[i]);return I(t)},children:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var r=this[a].children,i=0;i<r.length;i+=1)e&&!I(r[i]).is(e)||t.push(r[i]);return I(t)},filter:function(e){return I(o(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};function C(e,t){return setTimeout(e,1<arguments.length&&void 0!==t?t:0)}function w(){return Date.now()}function L(e,t){var a,r,i,s=1<arguments.length&&void 0!==t?t:"x",n=O(),o=(t=e,e=O(),o=(o=!(o=e.getComputedStyle?e.getComputedStyle(t,null):o)&&t.currentStyle?t.currentStyle:o)||t.style);return n.WebKitCSSMatrix?(6<(r=o.transform||o.webkitTransform).split(",").length&&(r=r.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),i=new n.WebKitCSSMatrix("none"===r?"":r)):a=(i=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===s&&(r=n.WebKitCSSMatrix?i.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),(r="y"===s?n.WebKitCSSMatrix?i.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5]):r)||0}function f(e){return"object"===_typeof(e)&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function u(e){for(var t,a=Object(arguments.length<=0?void 0:e),r=["__proto__","constructor","prototype"],i=1;i<arguments.length;i+=1){var s=i<0||arguments.length<=i?void 0:arguments[i];if(null!=s&&(t=s,!("undefined"!=typeof window&&void 0!==window.HTMLElement?t instanceof HTMLElement:t&&(1===t.nodeType||11===t.nodeType))))for(var n=Object.keys(Object(s)).filter(function(e){return r.indexOf(e)<0}),o=0,l=n.length;o<l;o+=1){var d=n[o],c=Object.getOwnPropertyDescriptor(s,d);void 0!==c&&c.enumerable&&(f(a[d])&&f(s[d])?s[d].__swiper__?a[d]=s[d]:u(a[d],s[d]):!f(a[d])&&f(s[d])?(a[d]={},s[d].__swiper__?a[d]=s[d]:u(a[d],s[d])):a[d]=s[d])}}return a}function W(e,t,a){e.style.setProperty(t,a)}function y(e){var r,i=e.swiper,s=e.targetPosition,n=e.side,o=O(),l=-i.translate,d=null,c=i.params.speed;i.wrapperEl.style.scrollSnapType="none",o.cancelAnimationFrame(i.cssModeFrameID);function p(e,t){return"next"===a&&t<=e||"prev"===a&&e<=t}var a=l<s?"next":"prev";(function e(){r=(new Date).getTime(),null===d&&(d=r);var t=Math.max(Math.min((r-d)/c,1),0),t=.5-Math.cos(t*Math.PI)/2,a=l+t*(s-l);if(p(a,s)&&(a=s),i.wrapperEl.scrollTo(_defineProperty({},n,a)),p(a,s))return i.wrapperEl.style.overflow="hidden",i.wrapperEl.style.scrollSnapType="",setTimeout(function(){i.wrapperEl.style.overflow="",i.wrapperEl.scrollTo(_defineProperty({},n,a))}),void o.cancelAnimationFrame(i.cssModeFrameID);i.cssModeFrameID=o.requestAnimationFrame(e)})()}function h(){var a,e;return r||(a=O(),e=T(),r={smoothScroll:e.documentElement&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in a||a.DocumentTouch&&e instanceof a.DocumentTouch),passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});a.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in a}),r}function m(e){return l=l||function(e){var t=(0<arguments.length&&void 0!==e?e:{}).userAgent,a=h(),r=(c=O()).navigator.platform,i=t||c.navigator.userAgent,s={ios:!1,android:!1},n=c.screen.width,o=c.screen.height,l=i.match(/(Android);?[\s\/]+([\d.]+)?/),d=i.match(/(iPad).*OS\s([\d_]+)/),e=i.match(/(iPod)(.*OS\s([\d_]+))?/),t=!d&&i.match(/(iPhone\sOS|iOS)\s([\d_]+)/),c="Win32"===r,r="MacIntel"===r;return!d&&r&&a.touch&&0<=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf("".concat(n,"x").concat(o))&&(d=(d=i.match(/(Version)\/([\d.]+)/))||[0,1,"13_0_0"],r=!1),l&&!c&&(s.os="android",s.android=!0),(d||t||e)&&(s.os="ios",s.ios=!0),s}(0<arguments.length&&void 0!==e?e:{})}function v(){var e,t;return c||(t=O(),c={isSafari:0<=(e=t.navigator.userAgent.toLowerCase()).indexOf("safari")&&e.indexOf("chrome")<0&&e.indexOf("android")<0,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}),c}function g(e){var t=e.swiper,a=e.runCallbacks,r=e.direction,i=e.step,s=t.activeIndex,e=t.previousIndex,r=(r=r)||(e<s?"next":s<e?"prev":"reset");t.emit("transition".concat(i)),a&&s!==e&&("reset"!==r?(t.emit("slideChangeTransition".concat(i)),"next"===r?t.emit("slideNextTransition".concat(i)):t.emit("slidePrevTransition".concat(i))):t.emit("slideResetTransition".concat(i)))}function b(a,e){return function e(t){return t&&t!==T()&&t!==O()?(t=t.assignedSlot||t).closest(a)||e(t.getRootNode().host):null}(1<arguments.length&&void 0!==e?e:this)}function x(){var e,t,a=this,r=a.params,i=a.el;i&&0===i.offsetWidth||(r.breakpoints&&a.setBreakpoint(),e=a.allowSlideNext,t=a.allowSlidePrev,i=a.snapGrid,a.allowSlideNext=!0,a.allowSlidePrev=!0,a.updateSize(),a.updateSlides(),a.updateSlidesClasses(),("auto"===r.slidesPerView||1<r.slidesPerView)&&a.isEnd&&!a.isBeginning&&!a.params.centeredSlides?a.slideTo(a.slides.length-1,0,!1,!0):a.slideTo(a.activeIndex,0,!1,!0),a.autoplay&&a.autoplay.running&&a.autoplay.paused&&a.autoplay.run(),a.allowSlidePrev=t,a.allowSlideNext=e,a.params.watchOverflow&&i!==a.snapGrid&&a.checkOverflow())}Object.keys(p).forEach(function(e){Object.defineProperty(I.fn,e,{value:p[e],writable:!0})});var E=!1;function S(){}function M(e,t){var a=T(),r=e.params,i=e.touchEvents,s=e.el,n=e.wrapperEl,o=e.device,l=e.support,d=!!r.nested,c="on"===t?"addEventListener":"removeEventListener",p=t;l.touch?(t=!("touchstart"!==i.start||!l.passiveListener||!r.passiveListeners)&&{passive:!0,capture:!1},s[c](i.start,e.onTouchStart,t),s[c](i.move,e.onTouchMove,l.passiveListener?{passive:!1,capture:d}:d),s[c](i.end,e.onTouchEnd,t),i.cancel&&s[c](i.cancel,e.onTouchEnd,t)):(s[c](i.start,e.onTouchStart,!1),a[c](i.move,e.onTouchMove,d),a[c](i.end,e.onTouchEnd,!1)),(r.preventClicks||r.preventClicksPropagation)&&s[c]("click",e.onClick,!0),r.cssMode&&n[c]("scroll",e.onScroll),r.updateOnWindowResize?e[p](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",x,!0):e[p]("observerUpdate",x,!0)}function P(e,t){return e.grid&&t.grid&&1<t.grid.rows}var k={init:!0,direction:"horizontal",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1};var $={eventsEmitter:{on:function(e,t,a){var r=this;if("function"!=typeof t)return r;var i=a?"unshift":"push";return e.split(" ").forEach(function(e){r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][i](t)}),r},once:function(r,i,e){var s=this;return"function"!=typeof i?s:(n.__emitterProxy=i,s.on(r,n,e));function n(){s.off(r,n),n.__emitterProxy&&delete n.__emitterProxy;for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];i.apply(s,t)}},onAny:function(e,t){if("function"!=typeof e)return this;t=t?"unshift":"push";return this.eventsAnyListeners.indexOf(e)<0&&this.eventsAnyListeners[t](e),this},offAny:function(e){var t=this;if(!t.eventsAnyListeners)return t;e=t.eventsAnyListeners.indexOf(e);return 0<=e&&t.eventsAnyListeners.splice(e,1),t},off:function(e,r){var i=this;return i.eventsListeners&&e.split(" ").forEach(function(a){void 0===r?i.eventsListeners[a]=[]:i.eventsListeners[a]&&i.eventsListeners[a].forEach(function(e,t){(e===r||e.__emitterProxy&&e.__emitterProxy===r)&&i.eventsListeners[a].splice(t,1)})}),i},emit:function(){var e,a,r,i=this;if(!i.eventsListeners)return i;for(var t=arguments.length,s=new Array(t),n=0;n<t;n++)s[n]=arguments[n];return r="string"==typeof s[0]||Array.isArray(s[0])?(e=s[0],a=s.slice(1,s.length),i):(e=s[0].events,a=s[0].data,s[0].context||i),a.unshift(r),(Array.isArray(e)?e:e.split(" ")).forEach(function(t){i.eventsAnyListeners&&i.eventsAnyListeners.length&&i.eventsAnyListeners.forEach(function(e){e.apply(r,[t].concat(_toConsumableArray(a)))}),i.eventsListeners&&i.eventsListeners[t]&&i.eventsListeners[t].forEach(function(e){e.apply(r,a)})}),i}},update:{updateSize:function(){var e=this,t=e.$el,a=void 0!==e.params.width&&null!==e.params.width?e.params.width:t[0].clientWidth,r=void 0!==e.params.height&&null!==e.params.height?e.params.height:t[0].clientHeight;0===a&&e.isHorizontal()||0===r&&e.isVertical()||(a=a-parseInt(t.css("padding-left")||0,10)-parseInt(t.css("padding-right")||0,10),r=r-parseInt(t.css("padding-top")||0,10)-parseInt(t.css("padding-bottom")||0,10),Number.isNaN(a)&&(a=0),Number.isNaN(r)&&(r=0),Object.assign(e,{width:a,height:r,size:e.isHorizontal()?a:r}))},updateSlides:function(){var t=this;function a(e){return t.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}function e(e,t){return parseFloat(e.getPropertyValue(a(t))||0)}var r=t.params,i=t.$wrapperEl,s=t.size,n=t.rtlTranslate,o=t.wrongRTL,l=((g=t.virtual&&r.virtual.enabled)?t.virtual:t).slides.length,d=i.children(".".concat(t.params.slideClass)),c=(g?t.virtual.slides:d).length,p=[],u=[],f=[],h=r.slidesOffsetBefore;"function"==typeof h&&(h=r.slidesOffsetBefore.call(t));var m=r.slidesOffsetAfter;"function"==typeof m&&(m=r.slidesOffsetAfter.call(t));var v=t.snapGrid.length,g=t.slidesGrid.length,w=r.spaceBetween,b=-h,y=0,x=0;if(void 0!==s){"string"==typeof w&&0<=w.indexOf("%")&&(w=parseFloat(w.replace("%",""))/100*s),t.virtualSize=-w,n?d.css({marginLeft:"",marginBottom:"",marginTop:""}):d.css({marginRight:"",marginBottom:"",marginTop:""}),r.centeredSlides&&r.cssMode&&(W(t.wrapperEl,"--swiper-centered-offset-before",""),W(t.wrapperEl,"--swiper-centered-offset-after",""));var E=r.grid&&1<r.grid.rows&&t.grid;E&&t.grid.initSlides(c);for(var T,C,S,M,P,k,$="auto"===r.slidesPerView&&r.breakpoints&&0<Object.keys(r.breakpoints).filter(function(e){return void 0!==r.breakpoints[e].slidesPerView}).length,z=0;z<c;z+=1){H=0;var O,I,L,A,_,D,N,G,B,H,X=d.eq(z);E&&t.grid.updateSlide(z,X,c,a),"none"!==X.css("display")&&("auto"===r.slidesPerView?($&&(d[z].style[a("width")]=""),G=getComputedStyle(X[0]),O=X[0].style.transform,I=X[0].style.webkitTransform,O&&(X[0].style.transform="none"),I&&(X[0].style.webkitTransform="none"),H=r.roundLengths?t.isHorizontal()?X.outerWidth(!0):X.outerHeight(!0):(L=e(G,"width"),A=e(G,"padding-left"),_=e(G,"padding-right"),D=e(G,"margin-left"),N=e(G,"margin-right"),(B=G.getPropertyValue("box-sizing"))&&"border-box"===B?L+D+N:(B=(G=X[0]).clientWidth,L+A+_+D+N+(G.offsetWidth-B))),O&&(X[0].style.transform=O),I&&(X[0].style.webkitTransform=I),r.roundLengths&&(H=Math.floor(H))):(H=(s-(r.slidesPerView-1)*w)/r.slidesPerView,r.roundLengths&&(H=Math.floor(H)),d[z]&&(d[z].style[a("width")]="".concat(H,"px"))),d[z]&&(d[z].swiperSlideSize=H),f.push(H),r.centeredSlides?(b=b+H/2+y/2+w,0===y&&0!==z&&(b=b-s/2-w),0===z&&(b=b-s/2-w),Math.abs(b)<.001&&(b=0),r.roundLengths&&(b=Math.floor(b)),x%r.slidesPerGroup==0&&p.push(b),u.push(b)):(r.roundLengths&&(b=Math.floor(b)),(x-Math.min(t.params.slidesPerGroupSkip,x))%t.params.slidesPerGroup==0&&p.push(b),u.push(b),b=b+H+w),t.virtualSize+=H+w,y=H,x+=1)}if(t.virtualSize=Math.max(t.virtualSize,s)+m,n&&o&&("slide"===r.effect||"coverflow"===r.effect)&&i.css({width:"".concat(t.virtualSize+r.spaceBetween,"px")}),r.setWrapperSize&&i.css(_defineProperty({},a("width"),"".concat(t.virtualSize+r.spaceBetween,"px"))),E&&t.grid.updateWrapperSize(H,p,a),!r.centeredSlides){for(var j=[],Y=0;Y<p.length;Y+=1){var R=p[Y];r.roundLengths&&(R=Math.floor(R)),p[Y]<=t.virtualSize-s&&j.push(R)}p=j,1<Math.floor(t.virtualSize-s)-Math.floor(p[p.length-1])&&p.push(t.virtualSize-s)}0===p.length&&(p=[0]),0!==r.spaceBetween&&(n=t.isHorizontal()&&n?"marginLeft":a("marginRight"),d.filter(function(e,t){return!r.cssMode||t!==d.length-1}).css(_defineProperty({},n,"".concat(w,"px")))),r.centeredSlides&&r.centeredSlidesBounds&&(T=0,f.forEach(function(e){T+=e+(r.spaceBetween||0)}),C=(T-=r.spaceBetween)-s,p=p.map(function(e){return e<0?-h:C<e?C+m:e})),r.centerInsufficientSlides&&(S=0,f.forEach(function(e){S+=e+(r.spaceBetween||0)}),(S-=r.spaceBetween)<s&&(M=(s-S)/2,p.forEach(function(e,t){p[t]=e-M}),u.forEach(function(e,t){u[t]=e+M}))),Object.assign(t,{slides:d,snapGrid:p,slidesGrid:u,slidesSizesGrid:f}),r.centeredSlides&&r.cssMode&&!r.centeredSlidesBounds&&(W(t.wrapperEl,"--swiper-centered-offset-before","".concat(-p[0],"px")),W(t.wrapperEl,"--swiper-centered-offset-after","".concat(t.size/2-f[f.length-1]/2,"px")),P=-t.snapGrid[0],k=-t.slidesGrid[0],t.snapGrid=t.snapGrid.map(function(e){return e+P}),t.slidesGrid=t.slidesGrid.map(function(e){return e+k})),c!==l&&t.emit("slidesLengthChange"),p.length!==v&&(t.params.watchOverflow&&t.checkOverflow(),t.emit("snapGridLengthChange")),u.length!==g&&t.emit("slidesGridLengthChange"),r.watchSlidesProgress&&t.updateSlidesOffset()}},updateAutoHeight:function(e){var t,a,r=this,i=[],s=r.virtual&&r.params.virtual.enabled,n=0;function o(t){return(s?r.slides.filter(function(e){return parseInt(e.getAttribute("data-swiper-slide-index"),10)===t}):r.slides.eq(t))[0]}if("number"==typeof e?r.setTransition(e):!0===e&&r.setTransition(r.params.speed),"auto"!==r.params.slidesPerView&&1<r.params.slidesPerView)if(r.params.centeredSlides)r.visibleSlides.each(function(e){i.push(e)});else for(t=0;t<Math.ceil(r.params.slidesPerView);t+=1){var l=r.activeIndex+t;if(l>r.slides.length&&!s)break;i.push(o(l))}else i.push(o(r.activeIndex));for(t=0;t<i.length;t+=1)void 0!==i[t]&&(n=n<(a=i[t].offsetHeight)?a:n);!n&&0!==n||r.$wrapperEl.css("height","".concat(n,"px"))},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this&&this.translate||0,t=this,a=t.params,r=t.slides,i=t.rtlTranslate,s=t.snapGrid;if(0!==r.length){void 0===r[0].swiperSlideOffset&&t.updateSlidesOffset();var n=i?e:-e;r.removeClass(a.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var o=0;o<r.length;o+=1){var l=r[o],d=l.swiperSlideOffset;a.cssMode&&a.centeredSlides&&(d-=r[0].swiperSlideOffset);var c=(n+(a.centeredSlides?t.minTranslate():0)-d)/(l.swiperSlideSize+a.spaceBetween),p=(n-s[0]+(a.centeredSlides?t.minTranslate():0)-d)/(l.swiperSlideSize+a.spaceBetween),u=-(n-d),d=u+t.slidesSizesGrid[o];(0<=u&&u<t.size-1||1<d&&d<=t.size||u<=0&&d>=t.size)&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(o),r.eq(o).addClass(a.slideVisibleClass)),l.progress=i?-c:c,l.originalProgress=i?-p:p}t.visibleSlides=I(t.visibleSlides)}},updateProgress:function(e){var t=this;void 0===e&&(o=t.rtlTranslate?-1:1,e=t&&t.translate&&t.translate*o||0);var a=t.params,r=t.maxTranslate()-t.minTranslate(),i=t.progress,s=t.isBeginning,n=s,o=l=t.isEnd,l=0==r?s=!(i=0):(s=(i=(e-t.minTranslate())/r)<=0,1<=i);Object.assign(t,{progress:i,isBeginning:s,isEnd:l}),(a.watchSlidesProgress||a.centeredSlides&&a.autoHeight)&&t.updateSlidesProgress(e),s&&!n&&t.emit("reachBeginning toEdge"),l&&!o&&t.emit("reachEnd toEdge"),(n&&!s||o&&!l)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){var e=this,t=e.slides,a=e.params,r=e.$wrapperEl,i=e.activeIndex,s=e.realIndex,n=e.virtual&&a.virtual.enabled;t.removeClass("".concat(a.slideActiveClass," ").concat(a.slideNextClass," ").concat(a.slidePrevClass," ").concat(a.slideDuplicateActiveClass," ").concat(a.slideDuplicateNextClass," ").concat(a.slideDuplicatePrevClass)),(i=n?e.$wrapperEl.find(".".concat(a.slideClass,'[data-swiper-slide-index="').concat(i,'"]')):t.eq(i)).addClass(a.slideActiveClass),a.loop&&(i.hasClass(a.slideDuplicateClass)?r.children(".".concat(a.slideClass,":not(.").concat(a.slideDuplicateClass,')[data-swiper-slide-index="').concat(s,'"]')):r.children(".".concat(a.slideClass,".").concat(a.slideDuplicateClass,'[data-swiper-slide-index="').concat(s,'"]'))).addClass(a.slideDuplicateActiveClass),s=i.nextAll(".".concat(a.slideClass)).eq(0).addClass(a.slideNextClass),a.loop&&0===s.length&&(s=t.eq(0)).addClass(a.slideNextClass),i=i.prevAll(".".concat(a.slideClass)).eq(0).addClass(a.slidePrevClass),a.loop&&0===i.length&&(i=t.eq(-1)).addClass(a.slidePrevClass),a.loop&&((s.hasClass(a.slideDuplicateClass)?r.children(".".concat(a.slideClass,":not(.").concat(a.slideDuplicateClass,')[data-swiper-slide-index="').concat(s.attr("data-swiper-slide-index"),'"]')):r.children(".".concat(a.slideClass,".").concat(a.slideDuplicateClass,'[data-swiper-slide-index="').concat(s.attr("data-swiper-slide-index"),'"]'))).addClass(a.slideDuplicateNextClass),(i.hasClass(a.slideDuplicateClass)?r.children(".".concat(a.slideClass,":not(.").concat(a.slideDuplicateClass,')[data-swiper-slide-index="').concat(i.attr("data-swiper-slide-index"),'"]')):r.children(".".concat(a.slideClass,".").concat(a.slideDuplicateClass,'[data-swiper-slide-index="').concat(i.attr("data-swiper-slide-index"),'"]'))).addClass(a.slideDuplicatePrevClass)),e.emitSlidesClasses()},updateActiveIndex:function(e){var t=this,a=t.rtlTranslate?t.translate:-t.translate,r=t.slidesGrid,i=t.snapGrid,s=t.params,n=t.activeIndex,o=t.realIndex,l=t.snapIndex,d=e;if(void 0===d){for(var c=0;c<r.length;c+=1)void 0!==r[c+1]?a>=r[c]&&a<r[c+1]-(r[c+1]-r[c])/2?d=c:a>=r[c]&&a<r[c+1]&&(d=c+1):a>=r[c]&&(d=c);s.normalizeSlideIndex&&(d<0||void 0===d)&&(d=0)}(s=0<=i.indexOf(a)?i.indexOf(a):(e=Math.min(s.slidesPerGroupSkip,d))+Math.floor((d-e)/s.slidesPerGroup))>=i.length&&(s=i.length-1),d!==n?(i=parseInt(t.slides.eq(d).attr("data-swiper-slide-index")||d,10),Object.assign(t,{snapIndex:s,realIndex:i,previousIndex:n,activeIndex:d}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),o!==i&&t.emit("realIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&t.emit("slideChange")):s!==l&&(t.snapIndex=s,t.emit("snapIndexChange"))},updateClickedSlide:function(e){var t,a=this,r=a.params,i=I(e).closest(".".concat(r.slideClass))[0],s=!1;if(i)for(var n=0;n<a.slides.length;n+=1)if(a.slides[n]===i){s=!0,t=n;break}if(!i||!s)return a.clickedSlide=void 0,void(a.clickedIndex=void 0);a.clickedSlide=i,a.virtual&&a.params.virtual.enabled?a.clickedIndex=parseInt(I(i).attr("data-swiper-slide-index"),10):a.clickedIndex=t,r.slideToClickedSlide&&void 0!==a.clickedIndex&&a.clickedIndex!==a.activeIndex&&a.slideToClickedSlide()}},translate:{getTranslate:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.isHorizontal()?"x":"y",t=this.params,a=this.rtlTranslate,r=this.translate,i=this.$wrapperEl;return t.virtualTranslate?a?-r:r:t.cssMode?r:(e=L(i[0],e),(e=a?-e:e)||0)},setTranslate:function(e,t){var a=this,r=a.rtlTranslate,i=a.params,s=a.$wrapperEl,n=a.wrapperEl,o=a.progress,l=0,d=0;a.isHorizontal()?l=r?-e:e:d=e,i.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),i.cssMode?n[a.isHorizontal()?"scrollLeft":"scrollTop"]=a.isHorizontal()?-l:-d:i.virtualTranslate||s.transform("translate3d(".concat(l,"px, ").concat(d,"px, ").concat(0,"px)")),a.previousTranslate=a.translate,a.translate=a.isHorizontal()?l:d,(0==(d=a.maxTranslate()-a.minTranslate())?0:(e-a.minTranslate())/d)!==o&&a.updateProgress(e),a.emit("setTranslate",a.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.params.speed,a=!(2<arguments.length&&void 0!==arguments[2])||arguments[2],r=!(3<arguments.length&&void 0!==arguments[3])||arguments[3],i=4<arguments.length?arguments[4]:void 0,s=this,n=s.params,o=s.wrapperEl;if(s.animating&&n.preventInteractionOnTransition)return!1;var l=s.minTranslate(),d=s.maxTranslate(),e=r&&l<e?l:r&&e<d?d:e;if(s.updateProgress(e),n.cssMode){n=s.isHorizontal();if(0===t)o[n?"scrollLeft":"scrollTop"]=-e;else{if(!s.support.smoothScroll)return y({swiper:s,targetPosition:-e,side:n?"left":"top"}),!0;o.scrollTo((_defineProperty(o={},n?"left":"top",-e),_defineProperty(o,"behavior","smooth"),o))}return!0}return 0===t?(s.setTransition(0),s.setTranslate(e),a&&(s.emit("beforeTransitionStart",t,i),s.emit("transitionEnd"))):(s.setTransition(t),s.setTranslate(e),a&&(s.emit("beforeTransitionStart",t,i),s.emit("transitionStart")),s.animating||(s.animating=!0,s.onTranslateToWrapperTransitionEnd||(s.onTranslateToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.$wrapperEl[0].removeEventListener("transitionend",s.onTranslateToWrapperTransitionEnd),s.$wrapperEl[0].removeEventListener("webkitTransitionEnd",s.onTranslateToWrapperTransitionEnd),s.onTranslateToWrapperTransitionEnd=null,delete s.onTranslateToWrapperTransitionEnd,a&&s.emit("transitionEnd"))}),s.$wrapperEl[0].addEventListener("transitionend",s.onTranslateToWrapperTransitionEnd),s.$wrapperEl[0].addEventListener("webkitTransitionEnd",s.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){this.params.cssMode||this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(){var e=!(0<arguments.length&&void 0!==arguments[0])||arguments[0],t=1<arguments.length?arguments[1]:void 0,a=this.params;a.cssMode||(a.autoHeight&&this.updateAutoHeight(),g({swiper:this,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(){var e=!(0<arguments.length&&void 0!==arguments[0])||arguments[0],t=1<arguments.length?arguments[1]:void 0,a=this.params;this.animating=!1,a.cssMode||(this.setTransition(0),g({swiper:this,runCallbacks:e,direction:t,step:"End"}))}},slide:{slideTo:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.params.speed,a=!(2<arguments.length&&void 0!==arguments[2])||arguments[2],r=3<arguments.length?arguments[3]:void 0,i=4<arguments.length?arguments[4]:void 0;if("number"!=typeof e&&"string"!=typeof e)throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. [".concat(_typeof(e),"] given."));if("string"==typeof e){var s=parseInt(e,10);if(!isFinite(s))throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. [".concat(e,"] given."));e=s}var n=this,o=e;o<0&&(o=0);var l=n.params,d=n.snapGrid,c=n.slidesGrid,p=n.previousIndex,u=n.activeIndex,f=n.rtlTranslate,s=n.wrapperEl,e=n.enabled;if(n.animating&&l.preventInteractionOnTransition||!e&&!r&&!i)return!1;i=Math.min(n.params.slidesPerGroupSkip,o),(i+=Math.floor((o-i)/n.params.slidesPerGroup))>=d.length&&(i=d.length-1),(u||l.initialSlide||0)===(p||0)&&a&&n.emit("beforeSlideChangeStart");var h,m=-d[i];if(n.updateProgress(m),l.normalizeSlideIndex)for(var v=0;v<c.length;v+=1){var g=-Math.floor(100*m),w=Math.floor(100*c[v]),b=Math.floor(100*c[v+1]);void 0!==c[v+1]?w<=g&&g<b-(b-w)/2?o=v:w<=g&&g<b&&(o=v+1):w<=g&&(o=v)}if(n.initialized&&o!==u){if(!n.allowSlideNext&&m<n.translate&&m<n.minTranslate())return!1;if(!n.allowSlidePrev&&m>n.translate&&m>n.maxTranslate()&&(u||0)!==o)return!1}if(h=u<o?"next":o<u?"prev":"reset",f&&-m===n.translate||!f&&m===n.translate)return n.updateActiveIndex(o),l.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),"slide"!==l.effect&&n.setTranslate(m),"reset"!==h&&(n.transitionStart(a,h),n.transitionEnd(a,h)),!1;if(l.cssMode){u=n.isHorizontal(),l=f?m:-m;if(0===t){f=n.virtual&&n.params.virtual.enabled;f&&(n.wrapperEl.style.scrollSnapType="none",n._immediateVirtual=!0),s[u?"scrollLeft":"scrollTop"]=l,f&&requestAnimationFrame(function(){n.wrapperEl.style.scrollSnapType="",n._swiperImmediateVirtual=!1})}else{if(!n.support.smoothScroll)return y({swiper:n,targetPosition:l,side:u?"left":"top"}),!0;s.scrollTo((_defineProperty(s={},u?"left":"top",l),_defineProperty(s,"behavior","smooth"),s))}return!0}return n.setTransition(t),n.setTranslate(m),n.updateActiveIndex(o),n.updateSlidesClasses(),n.emit("beforeTransitionStart",t,r),n.transitionStart(a,h),0===t?n.transitionEnd(a,h):n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(e){n&&!n.destroyed&&e.target===this&&(n.$wrapperEl[0].removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.$wrapperEl[0].removeEventListener("webkitTransitionEnd",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(a,h))}),n.$wrapperEl[0].addEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.$wrapperEl[0].addEventListener("webkitTransitionEnd",n.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:0,t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:this.params.speed,e=e;return this.params.loop&&(e+=this.loopedSlides),this.slideTo(e,t,!(2<arguments.length&&void 0!==arguments[2])||arguments[2],3<arguments.length?arguments[3]:void 0)},slideNext:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.params.speed,t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],a=2<arguments.length?arguments[2]:void 0,r=this,i=r.animating,s=r.enabled,n=r.params;if(!s)return r;if(s=n.slidesPerGroup,"auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(s=Math.max(r.slidesPerViewDynamic("current",!0),1)),s=r.activeIndex<n.slidesPerGroupSkip?1:s,n.loop){if(i&&n.loopPreventsSlide)return!1;r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft}return n.rewind&&r.isEnd?r.slideTo(0,e,t,a):r.slideTo(r.activeIndex+s,e,t,a)},slidePrev:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.params.speed,t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],a=2<arguments.length?arguments[2]:void 0,r=this,i=r.params,s=r.animating,n=r.snapGrid,o=r.slidesGrid,l=r.rtlTranslate;if(!r.enabled)return r;if(i.loop){if(s&&i.loopPreventsSlide)return!1;r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var c,p=d(l?r.translate:-r.translate),l=n.map(d);return void 0===(l=n[l.indexOf(p)-1])&&i.cssMode&&(n.forEach(function(e,t){e<=p&&(c=t)}),void 0!==c&&(l=n[0<c?c-1:c])),void(n=0)!==l&&((n=o.indexOf(l))<0&&(n=r.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(n=n-r.slidesPerViewDynamic("previous",!0)+1,n=Math.max(n,0))),i.rewind&&r.isBeginning?r.slideTo(r.slides.length-1,e,t,a):r.slideTo(n,e,t,a)},slideReset:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.params.speed;return this.slideTo(this.activeIndex,e,!(1<arguments.length&&void 0!==arguments[1])||arguments[1],2<arguments.length?arguments[2]:void 0)},slideToClosest:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:this.params.speed,t=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],a=2<arguments.length?arguments[2]:void 0,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:.5,i=this,s=i.activeIndex,n=Math.min(i.params.slidesPerGroupSkip,s),o=n+Math.floor((s-n)/i.params.slidesPerGroup),l=i.rtlTranslate?i.translate:-i.translate;return l>=i.snapGrid[o]?(n=i.snapGrid[o],(i.snapGrid[o+1]-n)*r<l-n&&(s+=i.params.slidesPerGroup)):l-(l=i.snapGrid[o-1])<=(i.snapGrid[o]-l)*r&&(s-=i.params.slidesPerGroup),s=Math.max(s,0),s=Math.min(s,i.slidesGrid.length-1),i.slideTo(s,e,t,a)},slideToClickedSlide:function(){var e,t=this,a=t.params,r=t.$wrapperEl,i="auto"===a.slidesPerView?t.slidesPerViewDynamic():a.slidesPerView,s=t.clickedIndex;a.loop?t.animating||(e=parseInt(I(t.clickedSlide).attr("data-swiper-slide-index"),10),a.centeredSlides?s<t.loopedSlides-i/2||s>t.slides.length-t.loopedSlides+i/2?(t.loopFix(),s=r.children(".".concat(a.slideClass,'[data-swiper-slide-index="').concat(e,'"]:not(.').concat(a.slideDuplicateClass,")")).eq(0).index(),C(function(){t.slideTo(s)})):t.slideTo(s):s>t.slides.length-i?(t.loopFix(),s=r.children(".".concat(a.slideClass,'[data-swiper-slide-index="').concat(e,'"]:not(.').concat(a.slideDuplicateClass,")")).eq(0).index(),C(function(){t.slideTo(s)})):t.slideTo(s)):t.slideTo(s)}},loop:{loopCreate:function(){var r=this,e=T(),t=r.params,a=r.$wrapperEl,i=0<a.children().length?I(a.children()[0].parentNode):a;i.children(".".concat(t.slideClass,".").concat(t.slideDuplicateClass)).remove();var s=i.children(".".concat(t.slideClass));if(t.loopFillGroupWithBlank){var n=t.slidesPerGroup-s.length%t.slidesPerGroup;if(n!==t.slidesPerGroup){for(var o=0;o<n;o+=1){var l=I(e.createElement("div")).addClass("".concat(t.slideClass," ").concat(t.slideBlankClass));i.append(l)}s=i.children(".".concat(t.slideClass))}}"auto"!==t.slidesPerView||t.loopedSlides||(t.loopedSlides=s.length),r.loopedSlides=Math.ceil(parseFloat(t.loopedSlides||t.slidesPerView,10)),r.loopedSlides+=t.loopAdditionalSlides,r.loopedSlides>s.length&&(r.loopedSlides=s.length);var d=[],c=[];s.each(function(e,t){var a=I(e);t<r.loopedSlides&&c.push(e),t<s.length&&t>=s.length-r.loopedSlides&&d.push(e),a.attr("data-swiper-slide-index",t)});for(var p=0;p<c.length;p+=1)i.append(I(c[p].cloneNode(!0)).addClass(t.slideDuplicateClass));for(var u=d.length-1;0<=u;--u)i.prepend(I(d[u].cloneNode(!0)).addClass(t.slideDuplicateClass))},loopFix:function(){var e=this;e.emit("beforeLoopFix");var t=e.activeIndex,a=e.slides,r=e.loopedSlides,i=e.allowSlidePrev,s=e.allowSlideNext,n=e.snapGrid,o=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var l,n=-n[t]-e.getTranslate();t<r?(l=a.length-3*r+t,e.slideTo(l+=r,0,!1,!0)&&0!=n&&e.setTranslate((o?-e.translate:e.translate)-n)):t>=a.length-r&&(l=-a.length+t+r,e.slideTo(l+=r,0,!1,!0)&&0!=n&&e.setTranslate((o?-e.translate:e.translate)-n)),e.allowSlidePrev=i,e.allowSlideNext=s,e.emit("loopFix")},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,a=this.slides;e.children(".".concat(t.slideClass,".").concat(t.slideDuplicateClass,",.").concat(t.slideClass,".").concat(t.slideBlankClass)).remove(),a.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(e){var t=this;t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode||((t="container"===t.params.touchEventsTarget?t.el:t.wrapperEl).style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab")},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="")}},events:{attachEvents:function(){var e=this,t=T(),a=e.params,r=e.support;e.onTouchStart=function(e){var t=this,a=T(),r=O(),i=t.touchEventsData,s=t.params,n=t.touches,o=t.enabled;if(o&&(!t.animating||!s.preventInteractionOnTransition)){!t.animating&&s.cssMode&&s.loop&&t.loopFix();var l=e,d=I((l=l.originalEvent?l.originalEvent:l).target);if(("wrapper"!==s.touchEventsTarget||d.closest(t.wrapperEl).length)&&(i.isTouchEvent="touchstart"===l.type,(i.isTouchEvent||!("which"in l)||3!==l.which)&&!(!i.isTouchEvent&&"button"in l&&0<l.button||i.isTouched&&i.isMoved))){!!s.noSwipingClass&&""!==s.noSwipingClass&&l.target&&l.target.shadowRoot&&e.path&&e.path[0]&&(d=I(e.path[0]));var c=s.noSwipingSelector||".".concat(s.noSwipingClass),p=!(!l.target||!l.target.shadowRoot);if(s.noSwiping&&(p?b(c,l.target):d.closest(c)[0]))t.allowClick=!0;else if(!s.swipeHandler||d.closest(s.swipeHandler)[0]){n.currentX=("touchstart"===l.type?l.targetTouches[0]:l).pageX,n.currentY=("touchstart"===l.type?l.targetTouches[0]:l).pageY;var u=n.currentX,o=n.currentY,p=s.edgeSwipeDetection||s.iOSEdgeSwipeDetection,c=s.edgeSwipeThreshold||s.iOSEdgeSwipeThreshold;if(p&&(u<=c||u>=r.innerWidth-c)){if("prevent"!==p)return;e.preventDefault()}Object.assign(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),n.startX=u,n.startY=o,i.touchStartTime=w(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,0<s.threshold&&(i.allowThresholdMove=!1),"touchstart"!==l.type&&(o=!0,d.is(i.focusableElements)&&(o=!1),a.activeElement&&I(a.activeElement).is(i.focusableElements)&&a.activeElement!==d[0]&&a.activeElement.blur(),o=o&&t.allowTouchMove&&s.touchStartPreventDefault,!s.touchStartForcePreventDefault&&!o||d[0].isContentEditable||l.preventDefault()),t.emit("touchStart",l)}}}}.bind(e),e.onTouchMove=function(e){var t=T(),a=this,r=a.touchEventsData,i=a.params,s=a.touches,n=a.rtlTranslate;if(a.enabled){var o=e;if(o.originalEvent&&(o=o.originalEvent),r.isTouched){if(!r.isTouchEvent||"touchmove"===o.type){var l="touchmove"===o.type&&o.targetTouches&&(o.targetTouches[0]||o.changedTouches[0]),e=("touchmove"===o.type?l:o).pageX,l=("touchmove"===o.type?l:o).pageY;if(o.preventedByNestedSwiper)return s.startX=e,void(s.startY=l);if(!a.allowTouchMove)return a.allowClick=!1,void(r.isTouched&&(Object.assign(s,{startX:e,startY:l,currentX:e,currentY:l}),r.touchStartTime=w()));if(r.isTouchEvent&&i.touchReleaseOnEdges&&!i.loop)if(a.isVertical()){if(l<s.startY&&a.translate<=a.maxTranslate()||l>s.startY&&a.translate>=a.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else if(e<s.startX&&a.translate<=a.maxTranslate()||e>s.startX&&a.translate>=a.minTranslate())return;if(r.isTouchEvent&&t.activeElement&&o.target===t.activeElement&&I(o.target).is(r.focusableElements))return r.isMoved=!0,void(a.allowClick=!1);if(r.allowTouchCallbacks&&a.emit("touchMove",o),!(o.targetTouches&&1<o.targetTouches.length)){s.currentX=e,s.currentY=l;t=s.currentX-s.startX,e=s.currentY-s.startY;if(!(a.params.threshold&&Math.sqrt(Math.pow(t,2)+Math.pow(e,2))<a.params.threshold))if(void 0===r.isScrolling&&(a.isHorizontal()&&s.currentY===s.startY||a.isVertical()&&s.currentX===s.startX?r.isScrolling=!1:25<=t*t+e*e&&(l=180*Math.atan2(Math.abs(e),Math.abs(t))/Math.PI,r.isScrolling=a.isHorizontal()?l>i.touchAngle:90-l>i.touchAngle)),r.isScrolling&&a.emit("touchMoveOpposite",o),void 0===r.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(r.startMoving=!0)),r.isScrolling)r.isTouched=!1;else if(r.startMoving){a.allowClick=!1,!i.cssMode&&o.cancelable&&o.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&o.stopPropagation(),r.isMoved||(i.loop&&!i.cssMode&&a.loopFix(),r.startTranslate=a.getTranslate(),a.setTransition(0),a.animating&&a.$wrapperEl.trigger("webkitTransitionEnd transitionend"),r.allowMomentumBounce=!1,!i.grabCursor||!0!==a.allowSlideNext&&!0!==a.allowSlidePrev||a.setGrabCursor(!0),a.emit("sliderFirstMove",o)),a.emit("sliderMove",o),r.isMoved=!0;t=a.isHorizontal()?t:e;s.diff=t,t*=i.touchRatio,a.swipeDirection=0<(t=n?-t:t)?"prev":"next",r.currentTranslate=t+r.startTranslate;e=!0,n=i.resistanceRatio;if(i.touchReleaseOnEdges&&(n=0),0<t&&r.currentTranslate>a.minTranslate()?(e=!1,i.resistance&&(r.currentTranslate=a.minTranslate()-1+Math.pow(-a.minTranslate()+r.startTranslate+t,n))):t<0&&r.currentTranslate<a.maxTranslate()&&(e=!1,i.resistance&&(r.currentTranslate=a.maxTranslate()+1-Math.pow(a.maxTranslate()-r.startTranslate-t,n))),e&&(o.preventedByNestedSwiper=!0),!a.allowSlideNext&&"next"===a.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!a.allowSlidePrev&&"prev"===a.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),a.allowSlidePrev||a.allowSlideNext||(r.currentTranslate=r.startTranslate),0<i.threshold){if(!(Math.abs(t)>i.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,r.currentTranslate=r.startTranslate,void(s.diff=a.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}i.followFinger&&!i.cssMode&&((i.freeMode&&i.freeMode.enabled&&a.freeMode||i.watchSlidesProgress)&&(a.updateActiveIndex(),a.updateSlidesClasses()),a.params.freeMode&&i.freeMode.enabled&&a.freeMode&&a.freeMode.onTouchMove(),a.updateProgress(r.currentTranslate),a.setTranslate(r.currentTranslate))}}}}else r.startMoving&&r.isScrolling&&a.emit("touchMoveOpposite",o)}}.bind(e),e.onTouchEnd=function(e){var t=this,a=t.touchEventsData,r=t.params,i=t.touches,s=t.rtlTranslate,n=t.slidesGrid;if(t.enabled){var o=e;if(o.originalEvent&&(o=o.originalEvent),a.allowTouchCallbacks&&t.emit("touchEnd",o),a.allowTouchCallbacks=!1,!a.isTouched)return a.isMoved&&r.grabCursor&&t.setGrabCursor(!1),a.isMoved=!1,void(a.startMoving=!1);r.grabCursor&&a.isMoved&&a.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var l,d=w(),c=d-a.touchStartTime;if(t.allowClick&&(e=o.path||o.composedPath&&o.composedPath(),t.updateClickedSlide(e&&e[0]||o.target),t.emit("tap click",o),c<300&&d-a.lastClickTime<300&&t.emit("doubleTap doubleClick",o)),a.lastClickTime=w(),C(function(){t.destroyed||(t.allowClick=!0)}),!a.isTouched||!a.isMoved||!t.swipeDirection||0===i.diff||a.currentTranslate===a.startTranslate)return a.isTouched=!1,a.isMoved=!1,void(a.startMoving=!1);if(a.isTouched=!1,a.isMoved=!1,a.startMoving=!1,l=r.followFinger?s?t.translate:-t.translate:-a.currentTranslate,!r.cssMode)if(t.params.freeMode&&r.freeMode.enabled)t.freeMode.onTouchEnd({currentPos:l});else{for(var p=0,u=t.slidesSizesGrid[0],f=0;f<n.length;f+=f<r.slidesPerGroupSkip?1:r.slidesPerGroup){var h=f<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;void 0!==n[f+h]?l>=n[f]&&l<n[f+h]&&(u=n[(p=f)+h]-n[f]):l>=n[f]&&(p=f,u=n[n.length-1]-n[n.length-2])}s=(l-n[p])/u,a=p<r.slidesPerGroupSkip-1?1:r.slidesPerGroup;c>r.longSwipesMs?r.longSwipes?("next"===t.swipeDirection&&(s>=r.longSwipesRatio?t.slideTo(p+a):t.slideTo(p)),"prev"===t.swipeDirection&&(s>1-r.longSwipesRatio?t.slideTo(p+a):t.slideTo(p))):t.slideTo(t.activeIndex):r.shortSwipes?t.navigation&&(o.target===t.navigation.nextEl||o.target===t.navigation.prevEl)?o.target===t.navigation.nextEl?t.slideTo(p+a):t.slideTo(p):("next"===t.swipeDirection&&t.slideTo(p+a),"prev"===t.swipeDirection&&t.slideTo(p)):t.slideTo(t.activeIndex)}}}.bind(e),a.cssMode&&(e.onScroll=function(){var e=this,t=e.wrapperEl,a=e.rtlTranslate;e.enabled&&(e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses(),(0==(t=e.maxTranslate()-e.minTranslate())?0:(e.translate-e.minTranslate())/t)!==e.progress&&e.updateProgress(a?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1))}.bind(e)),e.onClick=function(e){var t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}.bind(e),r.touch&&!E&&(t.addEventListener("touchstart",S),E=!0),M(e,"on")},detachEvents:function(){M(this,"off")}},breakpoints:{setBreakpoint:function(){var e,t,a,r=this,i=r.activeIndex,s=r.initialized,n=r.loopedSlides,o=void 0===n?0:n,l=r.params,d=r.$el,c=l.breakpoints;!c||0===Object.keys(c).length||(e=r.getBreakpoint(c,r.params.breakpointsBase,r.el))&&r.currentBreakpoint!==e&&(t=(e in c?c[e]:void 0)||r.originalParams,a=P(r,l),n=P(r,t),c=l.enabled,a&&!n?(d.removeClass("".concat(l.containerModifierClass,"grid ").concat(l.containerModifierClass,"grid-column")),r.emitContainerClasses()):!a&&n&&(d.addClass("".concat(l.containerModifierClass,"grid")),(t.grid.fill&&"column"===t.grid.fill||!t.grid.fill&&"column"===l.grid.fill)&&d.addClass("".concat(l.containerModifierClass,"grid-column")),r.emitContainerClasses()),d=t.direction&&t.direction!==l.direction,l=l.loop&&(t.slidesPerView!==l.slidesPerView||d),d&&s&&r.changeDirection(),u(r.params,t),d=r.params.enabled,Object.assign(r,{allowTouchMove:r.params.allowTouchMove,allowSlideNext:r.params.allowSlideNext,allowSlidePrev:r.params.allowSlidePrev}),c&&!d?r.disable():!c&&d&&r.enable(),r.currentBreakpoint=e,r.emit("_beforeBreakpoint",t),l&&s&&(r.loopDestroy(),r.loopCreate(),r.updateSlides(),r.slideTo(i-o+r.loopedSlides,0,!1)),r.emit("breakpoint",t))},getBreakpoint:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"window",a=2<arguments.length?arguments[2]:void 0;if(e&&("container"!==t||a)){var r=!1,i=O(),s="window"===t?i.innerHeight:a.clientHeight,n=Object.keys(e).map(function(e){if("string"!=typeof e||0!==e.indexOf("@"))return{value:e,point:e};var t=parseFloat(e.substr(1));return{value:s*t,point:e}});n.sort(function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)});for(var o=0;o<n.length;o+=1){var l=n[o],d=l.point,l=l.value;"window"===t?i.matchMedia("(min-width: ".concat(l,"px)")).matches&&(r=d):l<=a.clientWidth&&(r=d)}return r||"max"}}},checkOverflow:{checkOverflow:function(){var e,t=this,a=t.isLocked,r=t.params,i=r.slidesOffsetBefore;i?(e=t.slides.length-1,i=t.slidesGrid[e]+t.slidesSizesGrid[e]+2*i,t.isLocked=t.size>i):t.isLocked=1===t.snapGrid.length,!0===r.allowSlideNext&&(t.allowSlideNext=!t.isLocked),!0===r.allowSlidePrev&&(t.allowSlidePrev=!t.isLocked),a&&a!==t.isLocked&&(t.isEnd=!1),a!==t.isLocked&&t.emit(t.isLocked?"lock":"unlock")}},classes:{addClasses:function(){var a,r,e=this,t=e.classNames,i=e.params,s=e.rtl,n=e.$el,o=e.device,l=e.support,o=(o=["initialized",i.direction,{"pointer-events":!l.touch},{"free-mode":e.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:s},{grid:i.grid&&1<i.grid.rows},{"grid-column":i.grid&&1<i.grid.rows&&"column"===i.grid.fill},{android:o.android},{ios:o.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides}],a=i.containerModifierClass,r=[],o.forEach(function(t){"object"===_typeof(t)?Object.keys(t).forEach(function(e){t[e]&&r.push(a+e)}):"string"==typeof t&&r.push(a+t)}),r);t.push.apply(t,_toConsumableArray(o)),n.addClass(_toConsumableArray(t).join(" ")),e.emitContainerClasses()},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" ")),this.emitContainerClasses()}},images:{loadImage:function(e,t,a,r,i,s){var n=O();function o(){s&&s()}!(I(e).parent("picture")[0]||e.complete&&i)&&t?((n=new n.Image).onload=o,n.onerror=o,r&&(n.sizes=r),a&&(n.srcset=a),t&&(n.src=t)):o()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var a=0;a<e.imagesToLoad.length;a+=1){var r=e.imagesToLoad[a];e.loadImage(r,r.currentSrc||r.getAttribute("src"),r.srcset||r.getAttribute("srcset"),r.sizes||r.getAttribute("sizes"),!0,t)}}}},z={},A=function(){function d(){var t;_classCallCheck(this,d);for(var e=arguments.length,a=new Array(e),r=0;r<e;r++)a[r]=arguments[r];if(t=u({},t=(t=1===a.length&&a[0].constructor&&"Object"===Object.prototype.toString.call(a[0]).slice(8,-1)?a[0]:(o=a[0],a[1]))||{}),o&&!t.el&&(t.el=o),t.el&&1<I(t.el).length){var i=[];return I(t.el).each(function(e){e=u({},t,{el:e});i.push(new d(e))}),i}var s=this;s.__swiper__=!0,s.support=h(),s.device=m({userAgent:t.userAgent}),s.browser=v(),s.eventsListeners={},s.eventsAnyListeners=[],s.modules=_toConsumableArray(s.__modules__),t.modules&&Array.isArray(t.modules)&&(l=s.modules).push.apply(l,_toConsumableArray(t.modules));var n={};s.modules.forEach(function(e){var r,i;e({swiper:s,extendParams:(r=t,i=n,function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=Object.keys(e)[0],a=e[t];"object"===_typeof(a)&&null!==a&&(0<=["navigation","pagination","scrollbar"].indexOf(t)&&!0===r[t]&&(r[t]={auto:!0}),t in r&&"enabled"in a&&(!0===r[t]&&(r[t]={enabled:!0}),"object"!==_typeof(r[t])||"enabled"in r[t]||(r[t].enabled=!0),r[t]||(r[t]={enabled:!1}))),u(i,e)}),on:s.on.bind(s),once:s.once.bind(s),off:s.off.bind(s),emit:s.emit.bind(s)})});var o,l=u({},k,n);return s.params=u({},l,z,t),s.originalParams=u({},s.params),s.passedParams=u({},t),s.params&&s.params.on&&Object.keys(s.params.on).forEach(function(e){s.on(e,s.params.on[e])}),s.params&&s.params.onAny&&s.onAny(s.params.onAny),s.$=I,Object.assign(s,{enabled:s.params.enabled,el:o,classNames:[],slides:I(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===s.params.direction},isVertical:function(){return"vertical"===s.params.direction},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:s.params.allowSlideNext,allowSlidePrev:s.params.allowSlidePrev,touchEvents:(l=["touchstart","touchmove","touchend","touchcancel"],o=["pointerdown","pointermove","pointerup"],s.touchEventsTouch={start:l[0],move:l[1],end:l[2],cancel:l[3]},s.touchEventsDesktop={start:o[0],move:o[1],end:o[2]},s.support.touch||!s.params.simulateTouch?s.touchEventsTouch:s.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:s.params.focusableElements,lastClickTime:w(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:s.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),s.emit("_swiper"),s.params.init&&s.init(),s}return _createClass(d,[{key:"enable",value:function(){var e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}},{key:"disable",value:function(){var e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}},{key:"setProgress",value:function(e,t){var a=this;e=Math.min(Math.max(e,0),1);var r=a.minTranslate(),i=a.maxTranslate();a.translateTo((i-r)*e+r,void 0===t?0:t),a.updateActiveIndex(),a.updateSlidesClasses()}},{key:"emitContainerClasses",value:function(){var e,t=this;t.params._emitClasses&&t.el&&(e=t.el.className.split(" ").filter(function(e){return 0===e.indexOf("swiper")||0===e.indexOf(t.params.containerModifierClass)}),t.emit("_containerClasses",e.join(" ")))}},{key:"getSlideClasses",value:function(e){var t=this;return e.className.split(" ").filter(function(e){return 0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)}).join(" ")}},{key:"emitSlidesClasses",value:function(){var a,r=this;r.params._emitClasses&&r.el&&(a=[],r.slides.each(function(e){var t=r.getSlideClasses(e);a.push({slideEl:e,classNames:t}),r.emit("_slideClass",e,t)}),r.emit("_slideClasses",a))}},{key:"slidesPerViewDynamic",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"current",t=1<arguments.length&&void 0!==arguments[1]&&arguments[1],a=this,r=a.params,i=a.slides,s=a.slidesGrid,n=a.slidesSizesGrid,o=a.size,l=a.activeIndex,d=1;if(r.centeredSlides){for(var c,p=i[l].swiperSlideSize,u=l+1;u<i.length;u+=1)i[u]&&!c&&(d+=1,o<(p+=i[u].swiperSlideSize)&&(c=!0));for(var f=l-1;0<=f;--f)i[f]&&!c&&(d+=1,o<(p+=i[f].swiperSlideSize)&&(c=!0))}else if("current"===e)for(var h=l+1;h<i.length;h+=1)(t?s[h]+n[h]-s[l]<o:s[h]-s[l]<o)&&(d+=1);else for(var m=l-1;0<=m;--m)s[l]-s[m]<o&&(d+=1);return d}},{key:"update",value:function(){var e,t,a=this;function r(){var e=a.rtlTranslate?-1*a.translate:a.translate,e=Math.min(Math.max(e,a.maxTranslate()),a.minTranslate());a.setTranslate(e),a.updateActiveIndex(),a.updateSlidesClasses()}a&&!a.destroyed&&(e=a.snapGrid,(t=a.params).breakpoints&&a.setBreakpoint(),a.updateSize(),a.updateSlides(),a.updateProgress(),a.updateSlidesClasses(),a.params.freeMode&&a.params.freeMode.enabled?(r(),a.params.autoHeight&&a.updateAutoHeight()):(("auto"===a.params.slidesPerView||1<a.params.slidesPerView)&&a.isEnd&&!a.params.centeredSlides?a.slideTo(a.slides.length-1,0,!1,!0):a.slideTo(a.activeIndex,0,!1,!0))||r(),t.watchOverflow&&e!==a.snapGrid&&a.checkOverflow(),a.emit("update"))}},{key:"changeDirection",value:function(t){var e=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],a=this,r=a.params.direction;return(t=t||("horizontal"===r?"vertical":"horizontal"))===r||"horizontal"!==t&&"vertical"!==t||(a.$el.removeClass("".concat(a.params.containerModifierClass).concat(r)).addClass("".concat(a.params.containerModifierClass).concat(t)),a.emitContainerClasses(),a.params.direction=t,a.slides.each(function(e){"vertical"===t?e.style.width="":e.style.height=""}),a.emit("changeDirection"),e&&a.update()),a}},{key:"mount",value:function(t){var e=this;if(e.mounted)return!0;var a=I(t||e.params.el);if(!(t=a[0]))return!1;t.swiper=e;function r(){return".".concat((e.params.wrapperClass||"").trim().split(" ").join("."))}var i,s=function(){if(t&&t.shadowRoot&&t.shadowRoot.querySelector){var e=I(t.shadowRoot.querySelector(r()));return e.children=function(e){return a.children(e)},e}return a.children(r())}();return 0===s.length&&e.params.createElements&&(i=T().createElement("div"),s=I(i),i.className=e.params.wrapperClass,a.append(i),a.children(".".concat(e.params.slideClass)).each(function(e){s.append(e)})),Object.assign(e,{$el:a,el:t,$wrapperEl:s,wrapperEl:s[0],mounted:!0,rtl:"rtl"===t.dir.toLowerCase()||"rtl"===a.css("direction"),rtlTranslate:"horizontal"===e.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===a.css("direction")),wrongRTL:"-webkit-box"===s.css("display")}),!0}},{key:"init",value:function(e){var t=this;return t.initialized||!1===t.mount(e)||(t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.params.loop&&t.loopCreate(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.preloadImages&&t.preloadImages(),t.params.loop?t.slideTo(t.params.initialSlide+t.loopedSlides,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.attachEvents(),t.initialized=!0,t.emit("init"),t.emit("afterInit")),t}},{key:"destroy",value:function(){var t,e=!(0<arguments.length&&void 0!==arguments[0])||arguments[0],a=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],r=this,i=r.params,s=r.$el,n=r.$wrapperEl,o=r.slides;return void 0===r.params||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),i.loop&&r.loopDestroy(),a&&(r.removeClasses(),s.removeAttr("style"),n.removeAttr("style"),o&&o.length&&o.removeClass([i.slideVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),r.emit("destroy"),Object.keys(r.eventsListeners).forEach(function(e){r.off(e)}),!1!==e&&(r.$el[0].swiper=null,t=r,Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})),r.destroyed=!0),null}}],[{key:"extendDefaults",value:function(e){u(z,e)}},{key:"extendedDefaults",get:function(){return z}},{key:"defaults",get:function(){return k}},{key:"installModule",value:function(e){var t=d.prototype.__modules__=!d.prototype.__modules__?[]:d.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}},{key:"use",value:function(e){return Array.isArray(e)?e.forEach(function(e){return d.installModule(e)}):d.installModule(e),d}}]),d}();function _(a,r,i,s){var n=T();return a.params.createElements&&Object.keys(s).forEach(function(e){var t;i[e]||!0!==i.auto||((t=a.$el.children(".".concat(s[e]))[0])||((t=n.createElement("div")).className=s[e],a.$el.append(t)),i[e]=t,r[e]=t)}),i}function D(e){e=0<arguments.length&&void 0!==e?e:"";return".".concat(e.trim().replace(/([\.:!\/])/g,"\\$1").replace(/ /g,"."))}function N(e){var a=e.effect,r=e.swiper,t=e.on,i=e.setTranslate,s=e.setTransition,n=e.overwriteParams,o=e.perspective;t("beforeInit",function(){var e;r.params.effect===a&&(r.classNames.push("".concat(r.params.containerModifierClass).concat(a)),o&&o()&&r.classNames.push("".concat(r.params.containerModifierClass,"3d")),e=n?n():{},Object.assign(r.params,e),Object.assign(r.originalParams,e))}),t("setTranslate",function(){r.params.effect===a&&i()}),t("setTransition",function(e,t){r.params.effect===a&&s(t)})}function G(e,t){return e.transformEl?t.find(e.transformEl).css({"backface-visibility":"hidden","-webkit-backface-visibility":"hidden"}):t}function B(e){var a,r=e.swiper,t=e.duration,i=e.transformEl,s=e.allSlides,n=r.slides,e=r.activeIndex,o=r.$wrapperEl;r.params.virtualTranslate&&0!==t&&(a=!1,(s?i?n.find(i):n:i?n.eq(e).find(i):n.eq(e)).transitionEnd(function(){if(!a&&r&&!r.destroyed){a=!0,r.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)o.trigger(e[t])}}))}function H(e,t,a){var r="swiper-slide-shadow".concat(a?"-".concat(a):""),t=e.transformEl?t.find(e.transformEl):t,r=t.children(".".concat(r));return r.length||(r=I('<div class="swiper-slide-shadow'.concat(a?"-".concat(a):"",'"></div>')),t.append(r)),r}return Object.keys($).forEach(function(t){Object.keys($[t]).forEach(function(e){A.prototype[e]=$[t][e]})}),A.use([function(e){function s(){n&&!n.destroyed&&n.initialized&&(r("beforeResize"),r("resize"))}function t(){n&&!n.destroyed&&n.initialized&&r("orientationchange")}var n=e.swiper,a=e.on,r=e.emit,i=O(),o=null;a("init",function(){n.params.resizeObserver&&void 0!==i.ResizeObserver?n&&!n.destroyed&&n.initialized&&(o=new ResizeObserver(function(e){var t=n.width,a=n.height,r=t,i=a;e.forEach(function(e){var t=e.contentBoxSize,a=e.contentRect,e=e.target;e&&e!==n.el||(r=a?a.width:(t[0]||t).inlineSize,i=a?a.height:(t[0]||t).blockSize)}),r===t&&i===a||s()})).observe(n.el):(i.addEventListener("resize",s),i.addEventListener("orientationchange",t))}),a("destroy",function(){o&&o.unobserve&&n.el&&(o.unobserve(n.el),o=null),i.removeEventListener("resize",s),i.removeEventListener("orientationchange",t)})},function(e){function a(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},a=new(o.MutationObserver||o.WebkitMutationObserver)(function(e){var t;1!==e.length?(t=function(){s("observerUpdate",e[0])},o.requestAnimationFrame?o.requestAnimationFrame(t):o.setTimeout(t,0)):s("observerUpdate",e[0])});a.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),n.push(a)}var r=e.swiper,t=e.extendParams,i=e.on,s=e.emit,n=[],o=O();t({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",function(){if(r.params.observer){if(r.params.observeParents)for(var e=r.$el.parents(),t=0;t<e.length;t+=1)a(e[t]);a(r.$el[0],{childList:r.params.observeSlideChildren}),a(r.$wrapperEl[0],{attributes:!1})}}),i("destroy",function(){n.forEach(function(e){e.disconnect()}),n.splice(0,n.length)})}]),A.use([function(e){var t,x=e.swiper,a=e.extendParams,e=e.on;function E(e,t){var a=x.params.virtual;if(a.cache&&x.virtual.cache[t])return x.virtual.cache[t];e=a.renderSlide?I(a.renderSlide.call(x,e,t)):I('<div class="'.concat(x.params.slideClass,'" data-swiper-slide-index="').concat(t,'">').concat(e,"</div>"));return e.attr("data-swiper-slide-index")||e.attr("data-swiper-slide-index",t),a.cache&&(x.virtual.cache[t]=e),e}function o(e){var t=x.params,a=t.slidesPerView,r=t.slidesPerGroup,i=t.centeredSlides,s=x.params.virtual,n=s.addSlidesBefore,o=s.addSlidesAfter,l=x.virtual,d=l.from,c=l.to,p=l.slides,u=l.slidesGrid,t=l.offset;x.params.cssMode||x.updateActiveIndex();var s=x.activeIndex||0,l=x.rtlTranslate?"right":x.isHorizontal()?"left":"top",n=i?(m=Math.floor(a/2)+r+o,Math.floor(a/2)+r+n):(m=a+(r-1)+o,r+n),f=Math.max((s||0)-n,0),h=Math.min((s||0)+m,p.length-1),m=(x.slidesGrid[f]||0)-(x.slidesGrid[0]||0);function v(){x.updateSlides(),x.updateProgress(),x.updateSlidesClasses(),x.lazy&&x.params.lazy.enabled&&x.lazy.load()}if(Object.assign(x.virtual,{from:f,to:h,offset:m,slidesGrid:x.slidesGrid}),d===f&&c===h&&!e)return x.slidesGrid!==u&&m!==t&&x.slides.css(l,"".concat(m,"px")),void x.updateProgress();if(x.params.virtual.renderExternal)return x.params.virtual.renderExternal.call(x,{offset:m,from:f,to:h,slides:function(){for(var e=[],t=f;t<=h;t+=1)e.push(p[t]);return e}()}),void(x.params.virtual.renderExternalUpdate&&v());var g=[],w=[];if(e)x.$wrapperEl.find(".".concat(x.params.slideClass)).remove();else for(var b=d;b<=c;b+=1)(b<f||h<b)&&x.$wrapperEl.find(".".concat(x.params.slideClass,'[data-swiper-slide-index="').concat(b,'"]')).remove();for(var y=0;y<p.length;y+=1)f<=y&&y<=h&&(void 0===c||e?w.push(y):(c<y&&w.push(y),y<d&&g.push(y)));w.forEach(function(e){x.$wrapperEl.append(E(p[e],e))}),g.sort(function(e,t){return t-e}).forEach(function(e){x.$wrapperEl.prepend(E(p[e],e))}),x.$wrapperEl.children(".swiper-slide").css(l,"".concat(m,"px")),v()}a({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}}),x.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]},e("beforeInit",function(){x.params.virtual.enabled&&(x.virtual.slides=x.params.virtual.slides,x.classNames.push("".concat(x.params.containerModifierClass,"virtual")),x.params.watchSlidesProgress=!0,x.originalParams.watchSlidesProgress=!0,x.params.initialSlide||o())}),e("setTranslate",function(){x.params.virtual.enabled&&(x.params.cssMode&&!x._immediateVirtual?(clearTimeout(t),t=setTimeout(function(){o()},100)):o())}),e("init update resize",function(){x.params.virtual.enabled&&x.params.cssMode&&W(x.wrapperEl,"--swiper-virtual-size","".concat(x.virtualSize,"px"))}),Object.assign(x.virtual,{appendSlide:function(e){if("object"===_typeof(e)&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&x.virtual.slides.push(e[t]);else x.virtual.slides.push(e);o(!0)},prependSlide:function(e){var r,i,t=x.activeIndex,a=t+1,s=1;if(Array.isArray(e)){for(var n=0;n<e.length;n+=1)e[n]&&x.virtual.slides.unshift(e[n]);a=t+e.length,s=e.length}else x.virtual.slides.unshift(e);x.params.virtual.cache&&(r=x.virtual.cache,i={},Object.keys(r).forEach(function(e){var t=r[e],a=t.attr("data-swiper-slide-index");a&&t.attr("data-swiper-slide-index",parseInt(a,10)+s),i[parseInt(e,10)+s]=t}),x.virtual.cache=i),o(!0),x.slideTo(a,0)},removeSlide:function(e){if(null!=e){var t=x.activeIndex;if(Array.isArray(e))for(var a=e.length-1;0<=a;--a)x.virtual.slides.splice(e[a],1),x.params.virtual.cache&&delete x.virtual.cache[e[a]],e[a]<t&&--t,t=Math.max(t,0);else x.virtual.slides.splice(e,1),x.params.virtual.cache&&delete x.virtual.cache[e],e<t&&--t,t=Math.max(t,0);o(!0),x.slideTo(t,0)}},removeAllSlides:function(){x.virtual.slides=[],x.params.virtual.cache&&(x.virtual.cache={}),o(!0),x.slideTo(0,0)},update:o})},function(e){var w=e.swiper,t=e.extendParams,a=e.on,b=e.emit,y=T(),x=O();function r(e){if(w.enabled){var t=w.rtlTranslate,a=e,r=(a=a.originalEvent?a.originalEvent:a).keyCode||a.charCode,i=w.params.keyboard.pageUpDown,s=i&&33===r,n=i&&34===r,o=37===r,l=39===r,d=38===r,c=40===r;if(!w.allowSlideNext&&(w.isHorizontal()&&l||w.isVertical()&&c||n))return!1;if(!w.allowSlidePrev&&(w.isHorizontal()&&o||w.isVertical()&&d||s))return!1;if(!(a.shiftKey||a.altKey||a.ctrlKey||a.metaKey||y.activeElement&&y.activeElement.nodeName&&("input"===y.activeElement.nodeName.toLowerCase()||"textarea"===y.activeElement.nodeName.toLowerCase()))){if(w.params.keyboard.onlyInViewport&&(s||n||o||l||d||c)){var p=!1;if(0<w.$el.parents(".".concat(w.params.slideClass)).length&&0===w.$el.parents(".".concat(w.params.slideActiveClass)).length)return;var u=w.$el,e=u[0].clientWidth,i=u[0].clientHeight,f=x.innerWidth,h=x.innerHeight,u=w.$el.offset();t&&(u.left-=w.$el[0].scrollLeft);for(var m=[[u.left,u.top],[u.left+e,u.top],[u.left,u.top+i],[u.left+e,u.top+i]],v=0;v<m.length;v+=1){var g=m[v];0<=g[0]&&g[0]<=f&&0<=g[1]&&g[1]<=h&&(0===g[0]&&0===g[1]||(p=!0))}if(!p)return}w.isHorizontal()?((s||n||o||l)&&(a.preventDefault?a.preventDefault():a.returnValue=!1),((n||l)&&!t||(s||o)&&t)&&w.slideNext(),((s||o)&&!t||(n||l)&&t)&&w.slidePrev()):((s||n||d||c)&&(a.preventDefault?a.preventDefault():a.returnValue=!1),(n||c)&&w.slideNext(),(s||d)&&w.slidePrev()),b("keyPress",r)}}}function i(){w.keyboard.enabled||(I(y).on("keydown",r),w.keyboard.enabled=!0)}function s(){w.keyboard.enabled&&(I(y).off("keydown",r),w.keyboard.enabled=!1)}t({keyboard:{enabled:!(w.keyboard={enabled:!1}),onlyInViewport:!0,pageUpDown:!0}}),a("init",function(){w.params.keyboard.enabled&&i()}),a("destroy",function(){w.keyboard.enabled&&s()}),Object.assign(w.keyboard,{enable:i,disable:s})},function(e){var u,f=e.swiper,t=e.extendParams,a=e.on,h=e.emit,r=O();t({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}}),f.mousewheel={enabled:!1};var m,i=w(),v=[];function s(){f.enabled&&(f.mouseEntered=!0)}function n(){f.enabled&&(f.mouseEntered=!1)}function g(e){if(!(f.params.mousewheel.thresholdDelta&&e.delta<f.params.mousewheel.thresholdDelta||f.params.mousewheel.thresholdTime&&w()-i<f.params.mousewheel.thresholdTime)){if(6<=e.delta&&w()-i<60)return 1;e.direction<0?f.isEnd&&!f.params.loop||f.animating||(f.slideNext(),h("scroll",e.raw)):f.isBeginning&&!f.params.loop||f.animating||(f.slidePrev(),h("scroll",e.raw)),i=(new r.Date).getTime()}}function o(e){var t=e;if(f.enabled){var a=f.params.mousewheel;f.params.cssMode&&t.preventDefault();var r=f.$el;if("container"!==f.params.mousewheel.eventsTarget&&(r=I(f.params.mousewheel.eventsTarget)),!f.mouseEntered&&!r[0].contains(t.target)&&!a.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var i,s,n=0,o=f.rtlTranslate?-1:1,l=(d=l=s=i=0,"detail"in(r=t)&&(s=r.detail),"wheelDelta"in r&&(s=-r.wheelDelta/120),"wheelDeltaY"in r&&(s=-r.wheelDeltaY/120),"wheelDeltaX"in r&&(i=-r.wheelDeltaX/120),"axis"in r&&r.axis===r.HORIZONTAL_AXIS&&(i=s,s=0),l=10*i,d=10*s,"deltaY"in r&&(d=r.deltaY),"deltaX"in r&&(l=r.deltaX),r.shiftKey&&!l&&(l=d,d=0),(l||d)&&r.deltaMode&&(1===r.deltaMode?(l*=40,d*=40):(l*=800,d*=800)),{spinX:i=l&&!i?l<1?-1:1:i,spinY:s=d&&!s?d<1?-1:1:s,pixelX:l,pixelY:d});if(a.forceToAxis)if(f.isHorizontal()){if(!(Math.abs(l.pixelX)>Math.abs(l.pixelY)))return!0;n=-l.pixelX*o}else{if(!(Math.abs(l.pixelY)>Math.abs(l.pixelX)))return!0;n=-l.pixelY}else n=Math.abs(l.pixelX)>Math.abs(l.pixelY)?-l.pixelX*o:-l.pixelY;if(0===n)return!0;a.invert&&(n=-n);var d=f.getTranslate()+n*a.sensitivity;if((d=d>=f.minTranslate()?f.minTranslate():d)<=f.maxTranslate()&&(d=f.maxTranslate()),(!!f.params.loop||!(d===f.minTranslate()||d===f.maxTranslate()))&&f.params.nested&&t.stopPropagation(),f.params.freeMode&&f.params.freeMode.enabled){var c={time:w(),delta:Math.abs(n),direction:Math.sign(n)},o=m&&c.time<m.time+500&&c.delta<=m.delta&&c.direction===m.direction;if(!o){m=void 0,f.params.loop&&f.loopFix();var p,l=f.getTranslate()+n*a.sensitivity,d=f.isBeginning,a=f.isEnd;if((l=l>=f.minTranslate()?f.minTranslate():l)<=f.maxTranslate()&&(l=f.maxTranslate()),f.setTransition(0),f.setTranslate(l),f.updateProgress(),f.updateActiveIndex(),f.updateSlidesClasses(),(!d&&f.isBeginning||!a&&f.isEnd)&&f.updateSlidesClasses(),f.params.freeMode.sticky&&(clearTimeout(u),u=void 0,15<=v.length&&v.shift(),d=v.length?v[v.length-1]:void 0,a=v[0],v.push(c),d&&(c.delta>d.delta||c.direction!==d.direction)?v.splice(0):15<=v.length&&c.time-a.time<500&&1<=a.delta-c.delta&&c.delta<=6&&(p=0<n?.8:.2,m=c,v.splice(0),u=C(function(){f.slideToClosest(f.params.speed,!0,void 0,p)},0)),u=u||C(function(){m=c,v.splice(0),f.slideToClosest(f.params.speed,!0,void 0,.5)},500)),o||h("scroll",t),f.params.autoplay&&f.params.autoplayDisableOnInteraction&&f.autoplay.stop(),l===f.minTranslate()||l===f.maxTranslate())return!0}}else{n={time:w(),delta:Math.abs(n),direction:Math.sign(n),raw:e};2<=v.length&&v.shift();e=v.length?v[v.length-1]:void 0;if(v.push(n),(!e||n.direction!==e.direction||n.delta>e.delta||n.time>e.time+150)&&g(n),function(e){var t=f.params.mousewheel;if(e.direction<0){if(f.isEnd&&!f.params.loop&&t.releaseOnEdges)return 1}else if(f.isBeginning&&!f.params.loop&&t.releaseOnEdges)return 1}(n))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1}}function l(e){var t=f.$el;(t="container"!==f.params.mousewheel.eventsTarget?I(f.params.mousewheel.eventsTarget):t)[e]("mouseenter",s),t[e]("mouseleave",n),t[e]("wheel",o)}function d(){return f.params.cssMode?(f.wrapperEl.removeEventListener("wheel",o),!0):!f.mousewheel.enabled&&(l("on"),f.mousewheel.enabled=!0)}function c(){return f.params.cssMode?(f.wrapperEl.addEventListener(event,o),!0):!!f.mousewheel.enabled&&(l("off"),!(f.mousewheel.enabled=!1))}a("init",function(){!f.params.mousewheel.enabled&&f.params.cssMode&&c(),f.params.mousewheel.enabled&&d()}),a("destroy",function(){f.params.cssMode&&d(),f.mousewheel.enabled&&c()}),Object.assign(f.mousewheel,{enable:d,disable:c})},function(e){var s=e.swiper,t=e.extendParams,a=e.on,n=e.emit;function r(e){var t;return e&&(t=I(e),s.params.uniqueNavElements&&"string"==typeof e&&1<t.length&&1===s.$el.find(e).length&&(t=s.$el.find(e))),t}function i(e,t){var a=s.params.navigation;e&&0<e.length&&(e[t?"addClass":"removeClass"](a.disabledClass),e[0]&&"BUTTON"===e[0].tagName&&(e[0].disabled=t),s.params.watchOverflow&&s.enabled&&e[s.isLocked?"addClass":"removeClass"](a.lockClass))}function o(){var e,t;s.params.loop||(t=(e=s.navigation).$nextEl,i(e.$prevEl,s.isBeginning&&!s.params.rewind),i(t,s.isEnd&&!s.params.rewind))}function l(e){e.preventDefault(),s.isBeginning&&!s.params.loop&&!s.params.rewind||s.slidePrev()}function d(e){e.preventDefault(),s.isEnd&&!s.params.loop&&!s.params.rewind||s.slideNext()}function c(){var e,t,a=s.params.navigation;s.params.navigation=_(s,s.originalParams.navigation,s.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),(a.nextEl||a.prevEl)&&(e=r(a.nextEl),t=r(a.prevEl),e&&0<e.length&&e.on("click",d),t&&0<t.length&&t.on("click",l),Object.assign(s.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}),s.enabled||(e&&e.addClass(a.lockClass),t&&t.addClass(a.lockClass)))}function p(){var e=s.navigation,t=e.$nextEl,e=e.$prevEl;t&&t.length&&(t.off("click",d),t.removeClass(s.params.navigation.disabledClass)),e&&e.length&&(e.off("click",l),e.removeClass(s.params.navigation.disabledClass))}t({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}}),s.navigation={nextEl:null,$nextEl:null,prevEl:null,$prevEl:null},a("init",function(){c(),o()}),a("toEdge fromEdge lock unlock",function(){o()}),a("destroy",function(){p()}),a("enable disable",function(){var e=s.navigation,t=e.$nextEl,e=e.$prevEl;t&&t[s.enabled?"removeClass":"addClass"](s.params.navigation.lockClass),e&&e[s.enabled?"removeClass":"addClass"](s.params.navigation.lockClass)}),a("click",function(e,t){var a,r=s.navigation,i=r.$nextEl,r=r.$prevEl,t=t.target;!s.params.navigation.hideOnClick||I(t).is(r)||I(t).is(i)||s.pagination&&s.params.pagination&&s.params.pagination.clickable&&(s.pagination.el===t||s.pagination.el.contains(t))||(i?a=i.hasClass(s.params.navigation.hiddenClass):r&&(a=r.hasClass(s.params.navigation.hiddenClass)),n(!0===a?"navigationShow":"navigationHide"),i&&i.toggleClass(s.params.navigation.hiddenClass),r&&r.toggleClass(s.params.navigation.hiddenClass))}),Object.assign(s.navigation,{update:o,init:c,destroy:p})},function(e){var v,g=e.swiper,t=e.extendParams,a=e.on,w=e.emit,e="swiper-pagination";t({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"".concat(e,"-bullet"),bulletActiveClass:"".concat(e,"-bullet-active"),modifierClass:"".concat(e,"-"),currentClass:"".concat(e,"-current"),totalClass:"".concat(e,"-total"),hiddenClass:"".concat(e,"-hidden"),progressbarFillClass:"".concat(e,"-progressbar-fill"),progressbarOppositeClass:"".concat(e,"-progressbar-opposite"),clickableClass:"".concat(e,"-clickable"),lockClass:"".concat(e,"-lock"),horizontalClass:"".concat(e,"-horizontal"),verticalClass:"".concat(e,"-vertical")}}),g.pagination={el:null,$el:null,bullets:[]};var b=0;function y(){return!g.params.pagination.el||!g.pagination.el||!g.pagination.$el||0===g.pagination.$el.length}function x(e,t){var a=g.params.pagination.bulletActiveClass;e[t]().addClass("".concat(a,"-").concat(t))[t]().addClass("".concat(a,"-").concat(t,"-").concat(t))}function r(){var e=g.rtl,a=g.params.pagination;if(!y()){var r,t=(g.virtual&&g.params.virtual.enabled?g.virtual:g).slides.length,i=g.pagination.$el,s=g.params.loop?Math.ceil((t-2*g.loopedSlides)/g.params.slidesPerGroup):g.snapGrid.length;if(g.params.loop?((r=Math.ceil((g.activeIndex-g.loopedSlides)/g.params.slidesPerGroup))>t-1-2*g.loopedSlides&&(r-=t-2*g.loopedSlides),s-1<r&&(r-=s),r<0&&"bullets"!==g.params.paginationType&&(r=s+r)):r=void 0!==g.snapIndex?g.snapIndex:g.activeIndex||0,"bullets"===a.type&&g.pagination.bullets&&0<g.pagination.bullets.length){var n,o,l,d,c,p=g.pagination.bullets;if(a.dynamicBullets&&(v=p.eq(0)[g.isHorizontal()?"outerWidth":"outerHeight"](!0),i.css(g.isHorizontal()?"width":"height","".concat(v*(a.dynamicMainBullets+4),"px")),1<a.dynamicMainBullets&&void 0!==g.previousIndex&&((b+=r-(g.previousIndex-g.loopedSlides||0))>a.dynamicMainBullets-1?b=a.dynamicMainBullets-1:b<0&&(b=0)),n=Math.max(r-b,0),l=((o=n+(Math.min(p.length,a.dynamicMainBullets)-1))+n)/2),p.removeClass(["","-next","-next-next","-prev","-prev-prev","-main"].map(function(e){return"".concat(a.bulletActiveClass).concat(e)}).join(" ")),1<i.length)p.each(function(e){var t=I(e),e=t.index();e===r&&t.addClass(a.bulletActiveClass),a.dynamicBullets&&(n<=e&&e<=o&&t.addClass("".concat(a.bulletActiveClass,"-main")),e===n&&x(t,"prev"),e===o&&x(t,"next"))});else{var u=p.eq(r),f=u.index();if(u.addClass(a.bulletActiveClass),a.dynamicBullets){for(var t=p.eq(n),u=p.eq(o),h=n;h<=o;h+=1)p.eq(h).addClass("".concat(a.bulletActiveClass,"-main"));if(g.params.loop)if(f>=p.length){for(var m=a.dynamicMainBullets;0<=m;--m)p.eq(p.length-m).addClass("".concat(a.bulletActiveClass,"-main"));p.eq(p.length-a.dynamicMainBullets-1).addClass("".concat(a.bulletActiveClass,"-prev"))}else x(t,"prev"),x(u,"next");else x(t,"prev"),x(u,"next")}}a.dynamicBullets&&(c=Math.min(p.length,a.dynamicMainBullets+4),d=(v*c-v)/2-l*v,c=e?"right":"left",p.css(g.isHorizontal()?c:"top","".concat(d,"px")))}"fraction"===a.type&&(i.find(D(a.currentClass)).text(a.formatFractionCurrent(r+1)),i.find(D(a.totalClass)).text(a.formatFractionTotal(s))),"progressbar"===a.type&&(l=a.progressbarOpposite?g.isHorizontal()?"vertical":"horizontal":g.isHorizontal()?"horizontal":"vertical",e=(r+1)/s,d=c=1,"horizontal"===l?c=e:d=e,i.find(D(a.progressbarFillClass)).transform("translate3d(0,0,0) scaleX(".concat(c,") scaleY(").concat(d,")")).transition(g.params.speed)),"custom"===a.type&&a.renderCustom?(i.html(a.renderCustom(g,r+1,s)),w("paginationRender",i[0])):w("paginationUpdate",i[0]),g.params.watchOverflow&&g.enabled&&i[g.isLocked?"addClass":"removeClass"](a.lockClass)}}function i(){var e=g.params.pagination;if(!y()){var t=(g.virtual&&g.params.virtual.enabled?g.virtual:g).slides.length,a=g.pagination.$el,r="";if("bullets"===e.type){var i=g.params.loop?Math.ceil((t-2*g.loopedSlides)/g.params.slidesPerGroup):g.snapGrid.length;g.params.freeMode&&g.params.freeMode.enabled&&!g.params.loop&&t<i&&(i=t);for(var s=0;s<i;s+=1)e.renderBullet?r+=e.renderBullet.call(g,s,e.bulletClass):r+="<".concat(e.bulletElement,' class="').concat(e.bulletClass,'"></').concat(e.bulletElement,">");a.html(r),g.pagination.bullets=a.find(D(e.bulletClass))}"fraction"===e.type&&(r=e.renderFraction?e.renderFraction.call(g,e.currentClass,e.totalClass):'<span class="'.concat(e.currentClass,'"></span>')+" / "+'<span class="'.concat(e.totalClass,'"></span>'),a.html(r)),"progressbar"===e.type&&(r=e.renderProgressbar?e.renderProgressbar.call(g,e.progressbarFillClass):'<span class="'.concat(e.progressbarFillClass,'"></span>'),a.html(r)),"custom"!==e.type&&w("paginationRender",g.pagination.$el[0])}}function s(){g.params.pagination=_(g,g.originalParams.pagination,g.params.pagination,{el:"swiper-pagination"});var e,t=g.params.pagination;!t.el||0!==(e=I(t.el)).length&&(g.params.uniqueNavElements&&"string"==typeof t.el&&1<e.length&&1<(e=g.$el.find(t.el)).length&&(e=e.filter(function(e){return I(e).parents(".swiper")[0]===g.el})),"bullets"===t.type&&t.clickable&&e.addClass(t.clickableClass),e.addClass(t.modifierClass+t.type),e.addClass(t.modifierClass+g.params.direction),"bullets"===t.type&&t.dynamicBullets&&(e.addClass("".concat(t.modifierClass).concat(t.type,"-dynamic")),b=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&e.addClass(t.progressbarOppositeClass),t.clickable&&e.on("click",D(t.bulletClass),function(e){e.preventDefault();e=I(this).index()*g.params.slidesPerGroup;g.params.loop&&(e+=g.loopedSlides),g.slideTo(e)}),Object.assign(g.pagination,{$el:e,el:e[0]}),g.enabled||e.addClass(t.lockClass))}function n(){var e,t=g.params.pagination;y()||((e=g.pagination.$el).removeClass(t.hiddenClass),e.removeClass(t.modifierClass+t.type),e.removeClass(t.modifierClass+g.params.direction),g.pagination.bullets&&g.pagination.bullets.removeClass&&g.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&e.off("click",D(t.bulletClass)))}a("init",function(){s(),i(),r()}),a("activeIndexChange",function(){(g.params.loop||void 0===g.snapIndex)&&r()}),a("snapIndexChange",function(){g.params.loop||r()}),a("slidesLengthChange",function(){g.params.loop&&(i(),r())}),a("snapGridLengthChange",function(){g.params.loop||(i(),r())}),a("destroy",function(){n()}),a("enable disable",function(){var e=g.pagination.$el;e&&e[g.enabled?"removeClass":"addClass"](g.params.pagination.lockClass)}),a("lock unlock",function(){r()}),a("click",function(e,t){var a=t.target,t=g.pagination.$el;g.params.pagination.el&&g.params.pagination.hideOnClick&&0<t.length&&!I(a).hasClass(g.params.pagination.bulletClass)&&(g.navigation&&(g.navigation.nextEl&&a===g.navigation.nextEl||g.navigation.prevEl&&a===g.navigation.prevEl)||(a=t.hasClass(g.params.pagination.hiddenClass),w(!0===a?"paginationShow":"paginationHide"),t.toggleClass(g.params.pagination.hiddenClass)))}),Object.assign(g.pagination,{render:i,update:r,init:s,destroy:n})},function(e){var s,n,o,r,l=e.swiper,t=e.extendParams,a=e.on,d=e.emit,c=T(),p=!1,u=null,f=null;function i(){var e,t,a,r,i,s;l.params.scrollbar.el&&l.scrollbar.el&&(i=l.scrollbar,e=l.rtlTranslate,s=l.progress,t=i.$dragEl,a=i.$el,r=l.params.scrollbar,s=(o-(i=n))*s,e?0<(s=-s)?(i=n-s,s=0):o<-s+n&&(i=o+s):s<0?(i=n+s,s=0):o<s+n&&(i=o-s),l.isHorizontal()?(t.transform("translate3d(".concat(s,"px, 0, 0)")),t[0].style.width="".concat(i,"px")):(t.transform("translate3d(0px, ".concat(s,"px, 0)")),t[0].style.height="".concat(i,"px")),r.hide&&(clearTimeout(u),a[0].style.opacity=1,u=setTimeout(function(){a[0].style.opacity=0,a.transition(400)},1e3)))}function h(){var e,t,a;l.params.scrollbar.el&&l.scrollbar.el&&(t=(e=l.scrollbar).$dragEl,a=e.$el,t[0].style.width="",t[0].style.height="",o=l.isHorizontal()?a[0].offsetWidth:a[0].offsetHeight,r=l.size/(l.virtualSize+l.params.slidesOffsetBefore-(l.params.centeredSlides?l.snapGrid[0]:0)),n="auto"===l.params.scrollbar.dragSize?o*r:parseInt(l.params.scrollbar.dragSize,10),l.isHorizontal()?t[0].style.width="".concat(n,"px"):t[0].style.height="".concat(n,"px"),a[0].style.display=1<=r?"none":"",l.params.scrollbar.hide&&(a[0].style.opacity=0),l.params.watchOverflow&&l.enabled&&e.$el[l.isLocked?"addClass":"removeClass"](l.params.scrollbar.lockClass))}function m(e){return l.isHorizontal()?("touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0]:e).clientX:("touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0]:e).clientY}function v(e){var t=l.scrollbar,a=l.rtlTranslate,t=t.$el,t=(m(e)-t.offset()[l.isHorizontal()?"left":"top"]-(null!==s?s:n/2))/(o-n);t=Math.max(Math.min(t,1),0),a&&(t=1-t);t=l.minTranslate()+(l.maxTranslate()-l.minTranslate())*t;l.updateProgress(t),l.setTranslate(t),l.updateActiveIndex(),l.updateSlidesClasses()}function g(e){var t=l.params.scrollbar,a=l.scrollbar,r=l.$wrapperEl,i=a.$el,a=a.$dragEl;p=!0,s=e.target===a[0]||e.target===a?m(e)-e.target.getBoundingClientRect()[l.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),r.transition(100),a.transition(100),v(e),clearTimeout(f),i.transition(0),t.hide&&i.css("opacity",1),l.params.cssMode&&l.$wrapperEl.css("scroll-snap-type","none"),d("scrollbarDragStart",e)}function w(e){var t=l.scrollbar,a=l.$wrapperEl,r=t.$el,t=t.$dragEl;p&&(e.preventDefault?e.preventDefault():e.returnValue=!1,v(e),a.transition(0),r.transition(0),t.transition(0),d("scrollbarDragMove",e))}function b(e){var t=l.params.scrollbar,a=l.scrollbar,r=l.$wrapperEl,i=a.$el;p&&(p=!1,l.params.cssMode&&(l.$wrapperEl.css("scroll-snap-type",""),r.transition("")),t.hide&&(clearTimeout(f),f=C(function(){i.css("opacity",0),i.transition(400)},1e3)),d("scrollbarDragEnd",e),t.snapOnRelease&&l.slideToClosest())}function y(e){var t=l.scrollbar,a=l.touchEventsTouch,r=l.touchEventsDesktop,i=l.params,s=l.support,n=t.$el[0],t=!(!s.passiveListener||!i.passiveListeners)&&{passive:!1,capture:!1},i=!(!s.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1};n&&(e="on"===e?"addEventListener":"removeEventListener",s.touch?(n[e](a.start,g,t),n[e](a.move,w,t),n[e](a.end,b,i)):(n[e](r.start,g,t),c[e](r.move,w,t),c[e](r.end,b,i)))}function x(){var e=l.scrollbar,t=l.$el;l.params.scrollbar=_(l,l.originalParams.scrollbar,l.params.scrollbar,{el:"swiper-scrollbar"});var a,r=l.params.scrollbar;r.el&&(a=I(r.el),0===(t=(a=l.params.uniqueNavElements&&"string"==typeof r.el&&1<a.length&&1===t.find(r.el).length?t.find(r.el):a).find(".".concat(l.params.scrollbar.dragClass))).length&&(t=I('<div class="'.concat(l.params.scrollbar.dragClass,'"></div>')),a.append(t)),Object.assign(e,{$el:a,el:a[0],$dragEl:t,dragEl:t[0]}),r.draggable&&l.params.scrollbar.el&&y("on"),a&&a[l.enabled?"removeClass":"addClass"](l.params.scrollbar.lockClass))}function E(){l.params.scrollbar.el&&y("off")}t({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}}),l.scrollbar={el:null,dragEl:null,$el:null,$dragEl:null},a("init",function(){x(),h(),i()}),a("update resize observerUpdate lock unlock",function(){h()}),a("setTranslate",function(){i()}),a("setTransition",function(e,t){t=t,l.params.scrollbar.el&&l.scrollbar.el&&l.scrollbar.$dragEl.transition(t)}),a("enable disable",function(){var e=l.scrollbar.$el;e&&e[l.enabled?"removeClass":"addClass"](l.params.scrollbar.lockClass)}),a("destroy",function(){E()}),Object.assign(l.scrollbar,{updateSize:h,setTranslate:i,init:x,destroy:E})},function(e){var l=e.swiper,t=e.extendParams,e=e.on;function s(e,t){var a=l.rtl,r=I(e),i=a?-1:1,s=r.attr("data-swiper-parallax")||"0",n=r.attr("data-swiper-parallax-x"),o=r.attr("data-swiper-parallax-y"),e=r.attr("data-swiper-parallax-scale"),a=r.attr("data-swiper-parallax-opacity");n||o?(n=n||"0",o=o||"0"):l.isHorizontal()?(n=s,o="0"):(o=s,n="0"),n=0<=n.indexOf("%")?"".concat(parseInt(n,10)*t*i,"%"):"".concat(n*t*i,"px"),o=0<=o.indexOf("%")?"".concat(parseInt(o,10)*t,"%"):"".concat(o*t,"px"),null!=a&&(a=a-(a-1)*(1-Math.abs(t)),r[0].style.opacity=a),null==e?r.transform("translate3d(".concat(n,", ").concat(o,", 0px)")):(t=e-(e-1)*(1-Math.abs(t)),r.transform("translate3d(".concat(n,", ").concat(o,", 0px) scale(").concat(t,")")))}function a(){var e=l.$el,t=l.slides,r=l.progress,i=l.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e){s(e,r)}),t.each(function(e,t){var a=e.progress;1<l.params.slidesPerGroup&&"auto"!==l.params.slidesPerView&&(a+=Math.ceil(t/2)-r*(i.length-1)),a=Math.min(Math.max(a,-1),1),I(e).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e){s(e,a)})})}t({parallax:{enabled:!1}}),e("beforeInit",function(){l.params.parallax.enabled&&(l.params.watchSlidesProgress=!0,l.originalParams.watchSlidesProgress=!0)}),e("init",function(){l.params.parallax.enabled&&a()}),e("setTranslate",function(){l.params.parallax.enabled&&a()}),e("setTransition",function(e,t){l.params.parallax.enabled&&function(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:l.params.speed;l.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e){var t=I(e),e=parseInt(t.attr("data-swiper-parallax-duration"),10)||a;t.transition(e=0===a?0:e)})}(t)})},function(e){var o=e.swiper,t=e.extendParams,a=e.on,r=e.emit,l=O();t({zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),o.zoom={enabled:!1};var i,s,n,d=1,c=!1,p={$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},u={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},f={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0},h=1;function m(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,a=e.targetTouches[0].pageY,r=e.targetTouches[1].pageX,e=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(r-t,2)+Math.pow(e-a,2))}function v(e){var t=o.support,a=o.params.zoom;if(n=s=!1,!t.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;s=!0,p.scaleStart=m(e)}p.$slideEl&&p.$slideEl.length||(p.$slideEl=I(e.target).closest(".".concat(o.params.slideClass)),0===p.$slideEl.length&&(p.$slideEl=o.slides.eq(o.activeIndex)),p.$imageEl=p.$slideEl.find(".".concat(a.containerClass)).eq(0).find("picture, img, svg, canvas, .swiper-zoom-target").eq(0),p.$imageWrapEl=p.$imageEl.parent(".".concat(a.containerClass)),p.maxRatio=p.$imageWrapEl.attr("data-swiper-zoom")||a.maxRatio,0!==p.$imageWrapEl.length)?(p.$imageEl&&p.$imageEl.transition(0),c=!0):p.$imageEl=void 0}function g(e){var t=o.support,a=o.params.zoom,r=o.zoom;if(!t.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;n=!0,p.scaleMove=m(e)}p.$imageEl&&0!==p.$imageEl.length?(t.gestures?r.scale=e.scale*d:r.scale=p.scaleMove/p.scaleStart*d,r.scale>p.maxRatio&&(r.scale=p.maxRatio-1+Math.pow(r.scale-p.maxRatio+1,.5)),r.scale<a.minRatio&&(r.scale=a.minRatio+1-Math.pow(a.minRatio-r.scale+1,.5)),p.$imageEl.transform("translate3d(0,0,0) scale(".concat(r.scale,")"))):"gesturechange"===e.type&&v(e)}function w(e){var t=o.device,a=o.support,r=o.params.zoom,i=o.zoom;if(!a.gestures){if(!s||!n)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!t.android)return;n=s=!1}p.$imageEl&&0!==p.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,p.maxRatio),r.minRatio),p.$imageEl.transition(o.params.speed).transform("translate3d(0,0,0) scale(".concat(i.scale,")")),d=i.scale,c=!1,1===i.scale&&(p.$slideEl=void 0))}function b(e){var t=o.zoom;if(p.$imageEl&&0!==p.$imageEl.length&&(o.allowClick=!1,u.isTouched&&p.$slideEl)){u.isMoved||(u.width=p.$imageEl[0].offsetWidth,u.height=p.$imageEl[0].offsetHeight,u.startX=L(p.$imageWrapEl[0],"x")||0,u.startY=L(p.$imageWrapEl[0],"y")||0,p.slideWidth=p.$slideEl[0].offsetWidth,p.slideHeight=p.$slideEl[0].offsetHeight,p.$imageWrapEl.transition(0));var a=u.width*t.scale,t=u.height*t.scale;if(!(a<p.slideWidth&&t<p.slideHeight)){if(u.minX=Math.min(p.slideWidth/2-a/2,0),u.maxX=-u.minX,u.minY=Math.min(p.slideHeight/2-t/2,0),u.maxY=-u.minY,u.touchesCurrent.x=("touchmove"===e.type?e.targetTouches[0]:e).pageX,u.touchesCurrent.y=("touchmove"===e.type?e.targetTouches[0]:e).pageY,!u.isMoved&&!c){if(o.isHorizontal()&&(Math.floor(u.minX)===Math.floor(u.startX)&&u.touchesCurrent.x<u.touchesStart.x||Math.floor(u.maxX)===Math.floor(u.startX)&&u.touchesCurrent.x>u.touchesStart.x))return void(u.isTouched=!1);if(!o.isHorizontal()&&(Math.floor(u.minY)===Math.floor(u.startY)&&u.touchesCurrent.y<u.touchesStart.y||Math.floor(u.maxY)===Math.floor(u.startY)&&u.touchesCurrent.y>u.touchesStart.y))return void(u.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),u.isMoved=!0,u.currentX=u.touchesCurrent.x-u.touchesStart.x+u.startX,u.currentY=u.touchesCurrent.y-u.touchesStart.y+u.startY,u.currentX<u.minX&&(u.currentX=u.minX+1-Math.pow(u.minX-u.currentX+1,.8)),u.currentX>u.maxX&&(u.currentX=u.maxX-1+Math.pow(u.currentX-u.maxX+1,.8)),u.currentY<u.minY&&(u.currentY=u.minY+1-Math.pow(u.minY-u.currentY+1,.8)),u.currentY>u.maxY&&(u.currentY=u.maxY-1+Math.pow(u.currentY-u.maxY+1,.8)),f.prevPositionX||(f.prevPositionX=u.touchesCurrent.x),f.prevPositionY||(f.prevPositionY=u.touchesCurrent.y),f.prevTime||(f.prevTime=Date.now()),f.x=(u.touchesCurrent.x-f.prevPositionX)/(Date.now()-f.prevTime)/2,f.y=(u.touchesCurrent.y-f.prevPositionY)/(Date.now()-f.prevTime)/2,Math.abs(u.touchesCurrent.x-f.prevPositionX)<2&&(f.x=0),Math.abs(u.touchesCurrent.y-f.prevPositionY)<2&&(f.y=0),f.prevPositionX=u.touchesCurrent.x,f.prevPositionY=u.touchesCurrent.y,f.prevTime=Date.now(),p.$imageWrapEl.transform("translate3d(".concat(u.currentX,"px, ").concat(u.currentY,"px,0)"))}}}function y(){var e=o.zoom;p.$slideEl&&o.previousIndex!==o.activeIndex&&(p.$imageEl&&p.$imageEl.transform("translate3d(0,0,0) scale(1)"),p.$imageWrapEl&&p.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,d=1,p.$slideEl=void 0,p.$imageEl=void 0,p.$imageWrapEl=void 0)}function x(e){var t,a,r,i,s=o.zoom,n=o.params.zoom;p.$slideEl||(e&&e.target&&(p.$slideEl=I(e.target).closest(".".concat(o.params.slideClass))),p.$slideEl||(o.params.virtual&&o.params.virtual.enabled&&o.virtual?p.$slideEl=o.$wrapperEl.children(".".concat(o.params.slideActiveClass)):p.$slideEl=o.slides.eq(o.activeIndex)),p.$imageEl=p.$slideEl.find(".".concat(n.containerClass)).eq(0).find("picture, img, svg, canvas, .swiper-zoom-target").eq(0),p.$imageWrapEl=p.$imageEl.parent(".".concat(n.containerClass))),p.$imageEl&&0!==p.$imageEl.length&&p.$imageWrapEl&&0!==p.$imageWrapEl.length&&(o.params.cssMode&&(o.wrapperEl.style.overflow="hidden",o.wrapperEl.style.touchAction="none"),p.$slideEl.addClass("".concat(n.zoomedSlideClass)),i=void 0===u.touchesStart.x&&e?(r=("touchend"===e.type?e.changedTouches[0]:e).pageX,("touchend"===e.type?e.changedTouches[0]:e).pageY):(r=u.touchesStart.x,u.touchesStart.y),s.scale=p.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,d=p.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,e?(n=p.$slideEl[0].offsetWidth,e=p.$slideEl[0].offsetHeight,t=p.$slideEl.offset().left+l.scrollX+n/2-r,a=p.$slideEl.offset().top+l.scrollY+e/2-i,r=p.$imageEl[0].offsetWidth,i=p.$imageEl[0].offsetHeight,r=r*s.scale,i=i*s.scale,r=Math.min(n/2-r/2,0),e=Math.min(e/2-i/2,0),(i=-r)<(t=(t=t*s.scale)<r?r:t)&&(t=i),(i=-e)<(a=(a=a*s.scale)<e?e:a)&&(a=i)):a=t=0,p.$imageWrapEl.transition(300).transform("translate3d(".concat(t,"px, ").concat(a,"px,0)")),p.$imageEl.transition(300).transform("translate3d(0,0,0) scale(".concat(s.scale,")")))}function E(){var e=o.zoom,t=o.params.zoom;p.$slideEl||(o.params.virtual&&o.params.virtual.enabled&&o.virtual?p.$slideEl=o.$wrapperEl.children(".".concat(o.params.slideActiveClass)):p.$slideEl=o.slides.eq(o.activeIndex),p.$imageEl=p.$slideEl.find(".".concat(t.containerClass)).eq(0).find("picture, img, svg, canvas, .swiper-zoom-target").eq(0),p.$imageWrapEl=p.$imageEl.parent(".".concat(t.containerClass))),p.$imageEl&&0!==p.$imageEl.length&&p.$imageWrapEl&&0!==p.$imageWrapEl.length&&(o.params.cssMode&&(o.wrapperEl.style.overflow="",o.wrapperEl.style.touchAction=""),e.scale=1,d=1,p.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),p.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),p.$slideEl.removeClass("".concat(t.zoomedSlideClass)),p.$slideEl=void 0)}function T(e){var t=o.zoom;t.scale&&1!==t.scale?E():x(e)}function C(){var e=o.support;return{passiveListener:!("touchstart"!==o.touchEvents.start||!e.passiveListener||!o.params.passiveListeners)&&{passive:!0,capture:!1},activeListenerWithCapture:!e.passiveListener||{passive:!1,capture:!0}}}function S(){return".".concat(o.params.slideClass)}function M(e){var t=C().passiveListener,a=S();o.$wrapperEl[e]("gesturestart",a,v,t),o.$wrapperEl[e]("gesturechange",a,g,t),o.$wrapperEl[e]("gestureend",a,w,t)}function P(){i||(i=!0,M("on"))}function k(){i&&(i=!1,M("off"))}function $(){var e,t,a,r=o.zoom;r.enabled||(r.enabled=!0,e=o.support,t=(a=C()).passiveListener,r=a.activeListenerWithCapture,a=S(),e.gestures?(o.$wrapperEl.on(o.touchEvents.start,P,t),o.$wrapperEl.on(o.touchEvents.end,k,t)):"touchstart"===o.touchEvents.start&&(o.$wrapperEl.on(o.touchEvents.start,a,v,t),o.$wrapperEl.on(o.touchEvents.move,a,g,r),o.$wrapperEl.on(o.touchEvents.end,a,w,t),o.touchEvents.cancel&&o.$wrapperEl.on(o.touchEvents.cancel,a,w,t)),o.$wrapperEl.on(o.touchEvents.move,".".concat(o.params.zoom.containerClass),b,r))}function z(){var e,t,a,r=o.zoom;r.enabled&&(e=o.support,r.enabled=!1,t=(a=C()).passiveListener,r=a.activeListenerWithCapture,a=S(),e.gestures?(o.$wrapperEl.off(o.touchEvents.start,P,t),o.$wrapperEl.off(o.touchEvents.end,k,t)):"touchstart"===o.touchEvents.start&&(o.$wrapperEl.off(o.touchEvents.start,a,v,t),o.$wrapperEl.off(o.touchEvents.move,a,g,r),o.$wrapperEl.off(o.touchEvents.end,a,w,t),o.touchEvents.cancel&&o.$wrapperEl.off(o.touchEvents.cancel,a,w,t)),o.$wrapperEl.off(o.touchEvents.move,".".concat(o.params.zoom.containerClass),b,r))}Object.defineProperty(o.zoom,"scale",{get:function(){return h},set:function(e){var t,a;h!==e&&(t=p.$imageEl?p.$imageEl[0]:void 0,a=p.$slideEl?p.$slideEl[0]:void 0,r("zoomChange",e,t,a)),h=e}}),a("init",function(){o.params.zoom.enabled&&$()}),a("destroy",function(){z()}),a("touchStart",function(e,t){var a;o.zoom.enabled&&(a=t,t=o.device,p.$imageEl&&0!==p.$imageEl.length&&(u.isTouched||(t.android&&a.cancelable&&a.preventDefault(),u.isTouched=!0,u.touchesStart.x=("touchstart"===a.type?a.targetTouches[0]:a).pageX,u.touchesStart.y=("touchstart"===a.type?a.targetTouches[0]:a).pageY)))}),a("touchEnd",function(e,t){o.zoom.enabled&&function(){var e=o.zoom;if(p.$imageEl&&0!==p.$imageEl.length){if(!u.isTouched||!u.isMoved)return u.isTouched=!1,u.isMoved=!1;u.isTouched=!1,u.isMoved=!1;var t=300,a=300,r=f.x*t,i=u.currentX+r,r=f.y*a,r=u.currentY+r;0!==f.x&&(t=Math.abs((i-u.currentX)/f.x)),0!==f.y&&(a=Math.abs((r-u.currentY)/f.y));a=Math.max(t,a);u.currentX=i,u.currentY=r;r=u.width*e.scale,e=u.height*e.scale;u.minX=Math.min(p.slideWidth/2-r/2,0),u.maxX=-u.minX,u.minY=Math.min(p.slideHeight/2-e/2,0),u.maxY=-u.minY,u.currentX=Math.max(Math.min(u.currentX,u.maxX),u.minX),u.currentY=Math.max(Math.min(u.currentY,u.maxY),u.minY),p.$imageWrapEl.transition(a).transform("translate3d(".concat(u.currentX,"px, ").concat(u.currentY,"px,0)"))}}()}),a("doubleTap",function(e,t){!o.animating&&o.params.zoom.enabled&&o.zoom.enabled&&o.params.zoom.toggle&&T(t)}),a("transitionEnd",function(){o.zoom.enabled&&o.params.zoom.enabled&&y()}),a("slideChange",function(){o.zoom.enabled&&o.params.zoom.enabled&&o.params.cssMode&&y()}),Object.assign(o.zoom,{enable:$,disable:z,in:x,out:E,toggle:T})},function(e){var h=e.swiper,t=e.extendParams,a=e.on,c=e.emit;t({lazy:{checkInView:!1,enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,scrollingElement:"",elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}});var d=!(h.lazy={}),m=!1;function v(e){var o,l=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],d=h.params.lazy;void 0!==e&&0!==h.slides.length&&(e=(o=h.virtual&&h.params.virtual.enabled?h.$wrapperEl.children(".".concat(h.params.slideClass,'[data-swiper-slide-index="').concat(e,'"]')):h.slides.eq(e)).find(".".concat(d.elementClass,":not(.").concat(d.loadedClass,"):not(.").concat(d.loadingClass,")")),!o.hasClass(d.elementClass)||o.hasClass(d.loadedClass)||o.hasClass(d.loadingClass)||e.push(o[0]),0!==e.length&&e.each(function(e){var t=I(e);t.addClass(d.loadingClass);var a=t.attr("data-background"),r=t.attr("data-src"),i=t.attr("data-srcset"),s=t.attr("data-sizes"),n=t.parent("picture");h.loadImage(t[0],r||a,i,s,!1,function(){var e;null==h||!h||h&&!h.params||h.destroyed||(a?(t.css("background-image",'url("'.concat(a,'")')),t.removeAttr("data-background")):(i&&(t.attr("srcset",i),t.removeAttr("data-srcset")),s&&(t.attr("sizes",s),t.removeAttr("data-sizes")),n.length&&n.children("source").each(function(e){e=I(e);e.attr("data-srcset")&&(e.attr("srcset",e.attr("data-srcset")),e.removeAttr("data-srcset"))}),r&&(t.attr("src",r),t.removeAttr("data-src"))),t.addClass(d.loadedClass).removeClass(d.loadingClass),o.find(".".concat(d.preloaderClass)).remove(),h.params.loop&&l&&(e=o.attr("data-swiper-slide-index"),o.hasClass(h.params.slideDuplicateClass)?v(h.$wrapperEl.children('[data-swiper-slide-index="'.concat(e,'"]:not(.').concat(h.params.slideDuplicateClass,")")).index(),!1):v(h.$wrapperEl.children(".".concat(h.params.slideDuplicateClass,'[data-swiper-slide-index="').concat(e,'"]')).index(),!1)),c("lazyImageReady",o[0],t[0]),h.params.autoHeight&&h.updateAutoHeight())}),c("lazyImageLoad",o[0],t[0])}))}function p(){var t=h.$wrapperEl,a=h.params,r=h.slides,e=h.activeIndex,i=h.virtual&&a.virtual.enabled,s=a.lazy,n=a.slidesPerView;function o(e){if(i){if(t.children(".".concat(a.slideClass,'[data-swiper-slide-index="').concat(e,'"]')).length)return 1}else if(r[e])return 1}function l(e){return i?I(e).attr("data-swiper-slide-index"):I(e).index()}if("auto"===n&&(n=0),m=m||!0,h.params.watchSlidesProgress)t.children(".".concat(a.slideVisibleClass)).each(function(e){v(i?I(e).attr("data-swiper-slide-index"):I(e).index())});else if(1<n)for(var d=e;d<e+n;d+=1)o(d)&&v(d);else v(e);if(s.loadPrevNext)if(1<n||s.loadPrevNextAmount&&1<s.loadPrevNextAmount){for(var c=s.loadPrevNextAmount,s=n,p=Math.min(e+s+Math.max(c,s),r.length),c=Math.max(e-Math.max(s,c),0),u=e+n;u<p;u+=1)o(u)&&v(u);for(var f=c;f<e;f+=1)o(f)&&v(f)}else{c=t.children(".".concat(a.slideNextClass));0<c.length&&v(l(c));c=t.children(".".concat(a.slidePrevClass));0<c.length&&v(l(c))}}function u(){var e=O();if(h&&!h.destroyed){var t=h.params.lazy.scrollingElement?I(h.params.lazy.scrollingElement):I(e),a=t[0]===e,r=a?e.innerWidth:t[0].offsetWidth,i=a?e.innerHeight:t[0].offsetHeight,e=h.$el.offset(),s=!1;h.rtlTranslate&&(e.left-=h.$el[0].scrollLeft);for(var n=[[e.left,e.top],[e.left+h.width,e.top],[e.left,e.top+h.height],[e.left+h.width,e.top+h.height]],o=0;o<n.length;o+=1){var l=n[o];0<=l[0]&&l[0]<=r&&0<=l[1]&&l[1]<=i&&(0===l[0]&&0===l[1]||(s=!0))}e=!("touchstart"!==h.touchEvents.start||!h.support.passiveListener||!h.params.passiveListeners)&&{passive:!0,capture:!1};s?(p(),t.off("scroll",u,e)):d||(d=!0,t.on("scroll",u,e))}}a("beforeInit",function(){h.params.lazy.enabled&&h.params.preloadImages&&(h.params.preloadImages=!1)}),a("init",function(){h.params.lazy.enabled&&(h.params.lazy.checkInView?u:p)()}),a("scroll",function(){h.params.freeMode&&h.params.freeMode.enabled&&!h.params.freeMode.sticky&&p()}),a("scrollbarDragMove resize _freeModeNoMomentumRelease",function(){h.params.lazy.enabled&&(h.params.lazy.checkInView?u:p)()}),a("transitionStart",function(){h.params.lazy.enabled&&(!h.params.lazy.loadOnTransitionStart&&(h.params.lazy.loadOnTransitionStart||m)||(h.params.lazy.checkInView?u:p)())}),a("transitionEnd",function(){h.params.lazy.enabled&&!h.params.lazy.loadOnTransitionStart&&(h.params.lazy.checkInView?u:p)()}),a("slideChange",function(){var e=h.params,t=e.lazy,a=e.cssMode,r=e.watchSlidesProgress,i=e.touchReleaseOnEdges,e=e.resistanceRatio;t.enabled&&(a||r&&(i||0===e))&&p()}),Object.assign(h.lazy,{load:p,loadInSlide:v})},function(e){var l=e.swiper,t=e.extendParams,e=e.on;function d(e,t){var a,r,i,s,n,o=function(e,t){for(r=-1,a=e.length;1<a-r;)e[i=a+r>>1]<=t?r=i:a=i;return a};return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(n=o(this.x,e),s=n-1,(e-this.x[s])*(this.y[n]-this.y[s])/(this.x[n]-this.x[s])+this.y[s]):0},this}function a(){l.controller.control&&l.controller.spline&&(l.controller.spline=void 0,delete l.controller.spline)}t({controller:{control:void 0,inverse:!1,by:"slide"}}),l.controller={control:void 0},e("beforeInit",function(){l.controller.control=l.params.controller.control}),e("update",function(){a()}),e("resize",function(){a()}),e("observerUpdate",function(){a()}),e("setTranslate",function(e,t,a){l.controller.control&&l.controller.setTranslate(t,a)}),e("setTransition",function(e,t,a){l.controller.control&&l.controller.setTransition(t,a)}),Object.assign(l.controller,{setTranslate:function(e,t){var r,i,a=l.controller.control,s=l.constructor;function n(e){var t,a=l.rtlTranslate?-l.translate:l.translate;"slide"===l.params.controller.by&&(t=e,l.controller.spline||(l.controller.spline=l.params.loop?new d(l.slidesGrid,t.slidesGrid):new d(l.snapGrid,t.snapGrid)),i=-l.controller.spline.interpolate(-a)),i&&"container"!==l.params.controller.by||(r=(e.maxTranslate()-e.minTranslate())/(l.maxTranslate()-l.minTranslate()),i=(a-l.minTranslate())*r+e.minTranslate()),l.params.controller.inverse&&(i=e.maxTranslate()-i),e.updateProgress(i),e.setTranslate(i,l),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(a))for(var o=0;o<a.length;o+=1)a[o]!==t&&a[o]instanceof s&&n(a[o]);else a instanceof s&&t!==a&&n(a)},setTransition:function(t,e){var a,r=l.constructor,i=l.controller.control;function s(e){e.setTransition(t,l),0!==t&&(e.transitionStart(),e.params.autoHeight&&C(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){i&&(e.params.loop&&"slide"===l.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(i))for(a=0;a<i.length;a+=1)i[a]!==e&&i[a]instanceof r&&s(i[a]);else i instanceof r&&e!==i&&s(i)}})},function(e){var o=e.swiper,t=e.extendParams,e=e.on;t({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group"}});var l=null;function a(e){var t=l;0!==t.length&&(t.html(""),t.html(e))}function r(e){e.attr("tabIndex","0")}function i(e){e.attr("tabIndex","-1")}function d(e,t){e.attr("role",t)}function c(e,t){e.attr("aria-roledescription",t)}function p(e,t){e.attr("aria-label",t)}function s(e){e.attr("aria-disabled",!0)}function n(e){e.attr("aria-disabled",!1)}function u(e){var t;13!==e.keyCode&&32!==e.keyCode||(t=o.params.a11y,e=I(e.target),o.navigation&&o.navigation.$nextEl&&e.is(o.navigation.$nextEl)&&(o.isEnd&&!o.params.loop||o.slideNext(),o.isEnd?a(t.lastSlideMessage):a(t.nextSlideMessage)),o.navigation&&o.navigation.$prevEl&&e.is(o.navigation.$prevEl)&&(o.isBeginning&&!o.params.loop||o.slidePrev(),o.isBeginning?a(t.firstSlideMessage):a(t.prevSlideMessage)),o.pagination&&e.is(D(o.params.pagination.bulletClass))&&e[0].click())}function f(){var e,t;o.params.loop||o.params.rewind||!o.navigation||(e=(t=o.navigation).$nextEl,(t=t.$prevEl)&&0<t.length&&(o.isBeginning?(s(t),i(t)):(n(t),r(t))),e&&0<e.length&&(o.isEnd?(s(e),i(e)):(n(e),r(e))))}function h(){return o.pagination&&o.pagination.bullets&&o.pagination.bullets.length}function m(){return h()&&o.params.pagination.clickable}function v(e,t,a){r(e),"BUTTON"!==e[0].tagName&&(d(e,"button"),e.on("keydown",u)),p(e,a),e.attr("aria-controls",t)}function g(){var a=o.params.a11y;o.$el.append(l);var e=o.$el;a.containerRoleDescriptionMessage&&c(e,a.containerRoleDescriptionMessage),a.containerMessage&&p(e,a.containerMessage);var t=o.$wrapperEl,r=t.attr("id")||"swiper-wrapper-".concat(function(e){return"x".repeat(0<arguments.length&&void 0!==e?e:16).replace(/x/g,function(){return Math.round(16*Math.random()).toString(16)})}(16)),e=o.params.autoplay&&o.params.autoplay.enabled?"off":"polite";t.attr("id",r),t.attr("aria-live",e),a.itemRoleDescriptionMessage&&c(I(o.slides),a.itemRoleDescriptionMessage),d(I(o.slides),a.slideRole);var i,s,n=(o.params.loop?o.slides.filter(function(e){return!e.classList.contains(o.params.slideDuplicateClass)}):o.slides).length;o.slides.each(function(e,t){e=I(e),t=o.params.loop?parseInt(e.attr("data-swiper-slide-index"),10):t;p(e,a.slideLabelMessage.replace(/\{\{index\}\}/,t+1).replace(/\{\{slidesLength\}\}/,n))}),o.navigation&&o.navigation.$nextEl&&(i=o.navigation.$nextEl),o.navigation&&o.navigation.$prevEl&&(s=o.navigation.$prevEl),i&&i.length&&v(i,r,a.nextSlideMessage),s&&s.length&&v(s,r,a.prevSlideMessage),m()&&o.pagination.$el.on("keydown",D(o.params.pagination.bulletClass),u)}e("beforeInit",function(){l=I('<span class="'.concat(o.params.a11y.notificationClass,'" aria-live="assertive" aria-atomic="true"></span>'))}),e("afterInit",function(){o.params.a11y.enabled&&(g(),f())}),e("toEdge",function(){o.params.a11y.enabled&&f()}),e("fromEdge",function(){o.params.a11y.enabled&&f()}),e("paginationUpdate",function(){var t;o.params.a11y.enabled&&(t=o.params.a11y,h()&&o.pagination.bullets.each(function(e){e=I(e);o.params.pagination.clickable&&(r(e),o.params.pagination.renderBullet||(d(e,"button"),p(e,t.paginationBulletMessage.replace(/\{\{index\}\}/,e.index()+1)))),e.is(".".concat(o.params.pagination.bulletActiveClass))?e.attr("aria-current","true"):e.removeAttr("aria-current")}))}),e("destroy",function(){var e,t;o.params.a11y.enabled&&(l&&0<l.length&&l.remove(),o.navigation&&o.navigation.$nextEl&&(e=o.navigation.$nextEl),o.navigation&&o.navigation.$prevEl&&(t=o.navigation.$prevEl),e&&e.off("keydown",u),t&&t.off("keydown",u),m()&&o.pagination.$el.off("keydown",D(o.params.pagination.bulletClass),u))})},function(e){var n=e.swiper,t=e.extendParams,e=e.on;function a(e,t){var a,r,i=O();s&&n.params.history.enabled&&(a=n.params.url?new URL(n.params.url):i.location,r=n.slides.eq(t),t=o(r.attr("data-history")),0<n.params.history.root.length?("/"===(r=n.params.history.root)[r.length-1]&&(r=r.slice(0,r.length-1)),t="".concat(r,"/").concat(e,"/").concat(t)):a.pathname.includes(e)||(t="".concat(e,"/").concat(t)),(e=i.history.state)&&e.value===t||(n.params.history.replaceState?i.history.replaceState({value:t},null,t):i.history.pushState({value:t},null,t)))}function r(){i=l(n.params.url),d(n.params.speed,n.paths.value,!1)}t({history:{enabled:!1,root:"",replaceState:!1,key:"slides"}});var s=!1,i={},o=function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},l=function(e){var t=O(),e=e?new URL(e):t.location,t=e.pathname.slice(1).split("/").filter(function(e){return""!==e}),e=t.length;return{key:t[e-2],value:t[e-1]}},d=function(e,t,a){if(t)for(var r=0,i=n.slides.length;r<i;r+=1){var s=n.slides.eq(r);o(s.attr("data-history"))!==t||s.hasClass(n.params.slideDuplicateClass)||(s=s.index(),n.slideTo(s,e,a))}else n.slideTo(0,e,a)};e("init",function(){n.params.history.enabled&&function(){var e=O();if(n.params.history){if(!e.history||!e.history.pushState)return n.params.history.enabled=!1,n.params.hashNavigation.enabled=!0;s=!0,((i=l(n.params.url)).key||i.value)&&(d(0,i.value,n.params.runCallbacksOnInit),n.params.history.replaceState||e.addEventListener("popstate",r))}}()}),e("destroy",function(){var e;n.params.history.enabled&&(e=O(),n.params.history.replaceState||e.removeEventListener("popstate",r))}),e("transitionEnd _freeModeNoMomentumRelease",function(){s&&a(n.params.history.key,n.activeIndex)}),e("slideChange",function(){s&&n.params.cssMode&&a(n.params.history.key,n.activeIndex)})},function(e){var i=e.swiper,t=e.extendParams,a=e.emit,e=e.on,s=!1,n=T(),o=O();function l(){a("hashChange");var e=n.location.hash.replace("#","");e===i.slides.eq(i.activeIndex).attr("data-hash")||void 0!==(e=i.$wrapperEl.children(".".concat(i.params.slideClass,'[data-hash="').concat(e,'"]')).index())&&i.slideTo(e)}function r(){var e;s&&i.params.hashNavigation.enabled&&(i.params.hashNavigation.replaceState&&o.history&&o.history.replaceState?o.history.replaceState(null,null,"#".concat(i.slides.eq(i.activeIndex).attr("data-hash"))||""):(e=(e=i.slides.eq(i.activeIndex)).attr("data-hash")||e.attr("data-history"),n.location.hash=e||""),a("hashSet"))}t({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}}),e("init",function(){i.params.hashNavigation.enabled&&function(){if(!(!i.params.hashNavigation.enabled||i.params.history&&i.params.history.enabled)){s=!0;var e=n.location.hash.replace("#","");if(e)for(var t=0,a=i.slides.length;t<a;t+=1){var r=i.slides.eq(t);(r.attr("data-hash")||r.attr("data-history"))!==e||r.hasClass(i.params.slideDuplicateClass)||(r=r.index(),i.slideTo(r,0,i.params.runCallbacksOnInit,!0))}i.params.hashNavigation.watchState&&I(o).on("hashchange",l)}}()}),e("destroy",function(){i.params.hashNavigation.enabled&&i.params.hashNavigation.watchState&&I(o).off("hashchange",l)}),e("transitionEnd _freeModeNoMomentumRelease",function(){s&&r()}),e("slideChange",function(){s&&i.params.cssMode&&r()})},function(e){var a,r=e.swiper,t=e.extendParams,i=e.on,s=e.emit;function n(){var e=r.slides.eq(r.activeIndex),t=r.params.autoplay.delay;e.attr("data-swiper-autoplay")&&(t=e.attr("data-swiper-autoplay")||r.params.autoplay.delay),clearTimeout(a),a=C(function(){var e;r.params.autoplay.reverseDirection?r.params.loop?(r.loopFix(),e=r.slidePrev(r.params.speed,!0,!0),s("autoplay")):r.isBeginning?r.params.autoplay.stopOnLastSlide?l():(e=r.slideTo(r.slides.length-1,r.params.speed,!0,!0),s("autoplay")):(e=r.slidePrev(r.params.speed,!0,!0),s("autoplay")):r.params.loop?(r.loopFix(),e=r.slideNext(r.params.speed,!0,!0),s("autoplay")):r.isEnd?r.params.autoplay.stopOnLastSlide?l():(e=r.slideTo(0,r.params.speed,!0,!0),s("autoplay")):(e=r.slideNext(r.params.speed,!0,!0),s("autoplay")),(r.params.cssMode&&r.autoplay.running||!1===e)&&n()},t)}function o(){return void 0===a&&(!r.autoplay.running&&(r.autoplay.running=!0,s("autoplayStart"),n(),!0))}function l(){return!!r.autoplay.running&&(void 0!==a&&(a&&(clearTimeout(a),a=void 0),r.autoplay.running=!1,s("autoplayStop"),!0))}function d(e){r.autoplay.running&&(r.autoplay.paused||(a&&clearTimeout(a),r.autoplay.paused=!0,0!==e&&r.params.autoplay.waitForTransition?["transitionend","webkitTransitionEnd"].forEach(function(e){r.$wrapperEl[0].addEventListener(e,p)}):(r.autoplay.paused=!1,n())))}function c(){var e=T();"hidden"===e.visibilityState&&r.autoplay.running&&d(),"visible"===e.visibilityState&&r.autoplay.paused&&(n(),r.autoplay.paused=!1)}function p(e){r&&!r.destroyed&&r.$wrapperEl&&e.target===r.$wrapperEl[0]&&(["transitionend","webkitTransitionEnd"].forEach(function(e){r.$wrapperEl[0].removeEventListener(e,p)}),r.autoplay.paused=!1,(r.autoplay.running?n:l)())}function u(){(r.params.autoplay.disableOnInteraction?l:d)(),["transitionend","webkitTransitionEnd"].forEach(function(e){r.$wrapperEl[0].removeEventListener(e,p)})}function f(){r.params.autoplay.disableOnInteraction||(r.autoplay.paused=!1,n())}t({autoplay:{enabled:!(r.autoplay={running:!1,paused:!1}),delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}}),i("init",function(){r.params.autoplay.enabled&&(o(),T().addEventListener("visibilitychange",c),r.params.autoplay.pauseOnMouseEnter&&(r.$el.on("mouseenter",u),r.$el.on("mouseleave",f)))}),i("beforeTransitionStart",function(e,t,a){r.autoplay.running&&(a||!r.params.autoplay.disableOnInteraction?r.autoplay.pause(t):l())}),i("sliderFirstMove",function(){r.autoplay.running&&(r.params.autoplay.disableOnInteraction?l:d)()}),i("touchEnd",function(){r.params.cssMode&&r.autoplay.paused&&!r.params.autoplay.disableOnInteraction&&n()}),i("destroy",function(){r.$el.off("mouseenter",u),r.$el.off("mouseleave",f),r.autoplay.running&&l(),T().removeEventListener("visibilitychange",c)}),Object.assign(r.autoplay,{pause:d,run:n,start:o,stop:l})},function(e){var u=e.swiper,t=e.extendParams,e=e.on;t({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});var a=!1,r=!1;function i(){var e,t,a,r=u.thumbs.swiper;r&&(t=r.clickedIndex,(e=r.clickedSlide)&&I(e).hasClass(u.params.thumbs.slideThumbActiveClass)||null!=t&&(a=r.params.loop?parseInt(I(r.clickedSlide).attr("data-swiper-slide-index"),10):t,u.params.loop&&(e=u.activeIndex,u.slides.eq(e).hasClass(u.params.slideDuplicateClass)&&(u.loopFix(),u._clientLeft=u.$wrapperEl[0].clientLeft,e=u.activeIndex),r=u.slides.eq(e).prevAll('[data-swiper-slide-index="'.concat(a,'"]')).eq(0).index(),t=u.slides.eq(e).nextAll('[data-swiper-slide-index="'.concat(a,'"]')).eq(0).index(),a=void 0===r||void 0!==t&&t-e<e-r?t:r),u.slideTo(a)))}function s(){var e=u.params.thumbs;if(a)return!1;a=!0;var t=u.constructor;return e.swiper instanceof t?(u.thumbs.swiper=e.swiper,Object.assign(u.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(u.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):f(e.swiper)&&(e=Object.assign({},e.swiper),Object.assign(e,{watchSlidesProgress:!0,slideToClickedSlide:!1}),u.thumbs.swiper=new t(e),r=!0),u.thumbs.swiper.$el.addClass(u.params.thumbs.thumbsContainerClass),u.thumbs.swiper.on("tap",i),!0}function n(e){var t=u.thumbs.swiper;if(t){var a,r,i,s="auto"===t.params.slidesPerView?t.slidesPerViewDynamic():t.params.slidesPerView,n=u.params.thumbs.autoScrollOffset,o=n&&!t.params.loop;u.realIndex===t.realIndex&&!o||(a=t.activeIndex,i=t.params.loop?(t.slides.eq(a).hasClass(t.params.slideDuplicateClass)&&(t.loopFix(),t._clientLeft=t.$wrapperEl[0].clientLeft,a=t.activeIndex),i=t.slides.eq(a).prevAll('[data-swiper-slide-index="'.concat(u.realIndex,'"]')).eq(0).index(),r=t.slides.eq(a).nextAll('[data-swiper-slide-index="'.concat(u.realIndex,'"]')).eq(0).index(),r=void 0===i?r:void 0===r?i:r-a==a-i?1<t.params.slidesPerGroup?r:a:r-a<a-i?r:i,u.activeIndex>u.previousIndex?"next":"prev"):(r=u.realIndex)>u.previousIndex?"next":"prev",o&&(r+="next"===i?n:-1*n),t.visibleSlidesIndexes&&t.visibleSlidesIndexes.indexOf(r)<0&&(t.params.centeredSlides?r=a<r?r-Math.floor(s/2)+1:r+Math.floor(s/2)-1:a<r&&t.params.slidesPerGroup,t.slideTo(r,e?0:void 0)));var l=1,d=u.params.thumbs.slideThumbActiveClass;if(1<u.params.slidesPerView&&!u.params.centeredSlides&&(l=u.params.slidesPerView),u.params.thumbs.multipleActiveThumbs||(l=1),l=Math.floor(l),t.slides.removeClass(d),t.params.loop||t.params.virtual&&t.params.virtual.enabled)for(var c=0;c<l;c+=1)t.$wrapperEl.children('[data-swiper-slide-index="'.concat(u.realIndex+c,'"]')).addClass(d);else for(var p=0;p<l;p+=1)t.slides.eq(u.realIndex+p).addClass(d)}}u.thumbs={swiper:null},e("beforeInit",function(){var e=u.params.thumbs;e&&e.swiper&&(s(),n(!0))}),e("slideChange update resize observerUpdate",function(){u.thumbs.swiper&&n()}),e("setTransition",function(e,t){var a=u.thumbs.swiper;a&&a.setTransition(t)}),e("beforeDestroy",function(){var e=u.thumbs.swiper;e&&r&&e&&e.destroy()}),Object.assign(u.thumbs,{init:s,update:n})},function(e){var m=e.swiper,t=e.extendParams,v=e.emit,g=e.once;t({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(m,{freeMode:{onTouchMove:function(){var e=m.touchEventsData,t=m.touches;0===e.velocities.length&&e.velocities.push({position:t[m.isHorizontal()?"startX":"startY"],time:e.touchStartTime}),e.velocities.push({position:t[m.isHorizontal()?"currentX":"currentY"],time:w()})},onTouchEnd:function(e){var t=e.currentPos,a=m.params,r=m.$wrapperEl,i=m.rtlTranslate,s=m.snapGrid,n=m.touchEventsData,e=w()-n.touchStartTime;if(t<-m.minTranslate())m.slideTo(m.activeIndex);else if(t>-m.maxTranslate())m.slides.length<s.length?m.slideTo(s.length-1):m.slideTo(m.slides.length-1);else{if(a.freeMode.momentum){1<n.velocities.length?(u=n.velocities.pop(),l=n.velocities.pop(),o=u.position-l.position,l=u.time-l.time,m.velocity=o/l,m.velocity/=2,Math.abs(m.velocity)<a.freeMode.minimumVelocity&&(m.velocity=0),(150<l||300<w()-u.time)&&(m.velocity=0)):m.velocity=0,m.velocity*=a.freeMode.momentumVelocityRatio,n.velocities.length=0;var o=1e3*a.freeMode.momentumRatio,l=m.velocity*o,d=m.translate+l;i&&(d=-d);var c,p,u=!1,l=20*Math.abs(m.velocity)*a.freeMode.momentumBounceRatio;if(d<m.maxTranslate())a.freeMode.momentumBounce?(d+m.maxTranslate()<-l&&(d=m.maxTranslate()-l),c=m.maxTranslate(),n.allowMomentumBounce=u=!0):d=m.maxTranslate(),a.loop&&a.centeredSlides&&(p=!0);else if(d>m.minTranslate())a.freeMode.momentumBounce?(d-m.minTranslate()>l&&(d=m.minTranslate()+l),c=m.minTranslate(),n.allowMomentumBounce=u=!0):d=m.minTranslate(),a.loop&&a.centeredSlides&&(p=!0);else if(a.freeMode.sticky){for(var f,h=0;h<s.length;h+=1)if(s[h]>-d){f=h;break}d=-(d=Math.abs(s[f]-d)<Math.abs(s[f-1]-d)||"next"===m.swipeDirection?s[f]:s[f-1])}if(p&&g("transitionEnd",function(){m.loopFix()}),0!==m.velocity)o=i?Math.abs((-d-m.translate)/m.velocity):Math.abs((d-m.translate)/m.velocity),a.freeMode.sticky&&(o=(p=Math.abs((i?-d:d)-m.translate))<(i=m.slidesSizesGrid[m.activeIndex])?a.speed:p<2*i?1.5*a.speed:2.5*a.speed);else if(a.freeMode.sticky)return void m.slideToClosest();a.freeMode.momentumBounce&&u?(m.updateProgress(c),m.setTransition(o),m.setTranslate(d),m.transitionStart(!0,m.swipeDirection),m.animating=!0,r.transitionEnd(function(){m&&!m.destroyed&&n.allowMomentumBounce&&(v("momentumBounce"),m.setTransition(a.speed),setTimeout(function(){m.setTranslate(c),r.transitionEnd(function(){m&&!m.destroyed&&m.transitionEnd()})},0))})):m.velocity?(v("_freeModeNoMomentumRelease"),m.updateProgress(d),m.setTransition(o),m.setTranslate(d),m.transitionStart(!0,m.swipeDirection),m.animating||(m.animating=!0,r.transitionEnd(function(){m&&!m.destroyed&&m.transitionEnd()}))):m.updateProgress(d),m.updateActiveIndex(),m.updateSlidesClasses()}else{if(a.freeMode.sticky)return void m.slideToClosest();a.freeMode&&v("_freeModeNoMomentumRelease")}(!a.freeMode.momentum||e>=a.longSwipesMs)&&(m.updateProgress(),m.updateActiveIndex(),m.updateSlidesClasses())}}}})},function(e){var c,p,u,f=e.swiper;(0,e.extendParams)({grid:{rows:1,fill:"column"}}),f.grid={initSlides:function(e){var t=f.params.slidesPerView,a=f.params.grid,r=a.rows,a=a.fill;p=c/r,u=Math.floor(e/r),c=Math.floor(e/r)===e/r?e:Math.ceil(e/r)*r,"auto"!==t&&"row"===a&&(c=Math.max(c,t*r))},updateSlide:function(e,t,a,r){var i,s,n=f.params,o=n.slidesPerGroup,l=n.spaceBetween,d=f.params.grid,n=d.rows,d=d.fill;"row"===d&&1<o?(i=e-n*o*(s=Math.floor(e/(o*n))),a=0===s?o:Math.min(Math.ceil((a-s*n*o)/n),o),o=(s=i-(i=Math.floor(i/a))*a+s*o)+i*c/n,t.css({"-webkit-order":o,order:o})):"column"===d?(i=e-(s=Math.floor(e/n))*n,(u<s||s===u&&i===n-1)&&n<=(i+=1)&&(i=0,s+=1)):s=e-(i=Math.floor(e/p))*p,t.css(r("margin-top"),0!==i?l&&"".concat(l,"px"):"")},updateWrapperSize:function(e,t,a){var r=f.params,i=r.spaceBetween,s=r.centeredSlides,n=r.roundLengths,r=f.params.grid.rows;if(f.virtualSize=(e+i)*c,f.virtualSize=Math.ceil(f.virtualSize/r)-i,f.$wrapperEl.css(_defineProperty({},a("width"),"".concat(f.virtualSize+i,"px"))),s){t.splice(0,t.length);for(var o=[],l=0;l<t.length;l+=1){var d=t[l];n&&(d=Math.floor(d)),t[l]<f.virtualSize+t[0]&&o.push(d)}t.push.apply(t,o)}}}},function(e){e=e.swiper,Object.assign(e,{appendSlide:function(e){var t=this,a=t.$wrapperEl,r=t.params;if(r.loop&&t.loopDestroy(),"object"===_typeof(e)&&"length"in e)for(var i=0;i<e.length;i+=1)e[i]&&a.append(e[i]);else a.append(e);r.loop&&t.loopCreate(),r.observer||t.update()}.bind(e),prependSlide:function(e){var t=this,a=t.params,r=t.$wrapperEl,i=t.activeIndex;a.loop&&t.loopDestroy();var s=i+1;if("object"===_typeof(e)&&"length"in e){for(var n=0;n<e.length;n+=1)e[n]&&r.prepend(e[n]);s=i+e.length}else r.prepend(e);a.loop&&t.loopCreate(),a.observer||t.update(),t.slideTo(s,0,!1)}.bind(e),addSlide:function(e,t){var a=this,r=a.$wrapperEl,i=a.params,s=a.activeIndex;i.loop&&(s-=a.loopedSlides,a.loopDestroy(),a.slides=r.children(".".concat(i.slideClass)));var n=a.slides.length;if(e<=0)a.prependSlide(t);else if(n<=e)a.appendSlide(t);else{for(var o=e<s?s+1:s,l=[],d=n-1;e<=d;--d){var c=a.slides.eq(d);c.remove(),l.unshift(c)}if("object"===_typeof(t)&&"length"in t){for(var p=0;p<t.length;p+=1)t[p]&&r.append(t[p]);o=e<s?s+t.length:s}else r.append(t);for(var u=0;u<l.length;u+=1)r.append(l[u]);i.loop&&a.loopCreate(),i.observer||a.update(),i.loop?a.slideTo(o+a.loopedSlides,0,!1):a.slideTo(o,0,!1)}}.bind(e),removeSlide:function(e){var t=this,a=t.params,r=t.$wrapperEl,i=t.activeIndex;a.loop&&(i-=t.loopedSlides,t.loopDestroy(),t.slides=r.children(".".concat(a.slideClass)));var s,n=i;if("object"===_typeof(e)&&"length"in e){for(var o=0;o<e.length;o+=1)s=e[o],t.slides[s]&&t.slides.eq(s).remove(),s<n&&--n;n=Math.max(n,0)}else t.slides[s=e]&&t.slides.eq(s).remove(),s<n&&--n,n=Math.max(n,0);a.loop&&t.loopCreate(),a.observer||t.update(),a.loop?t.slideTo(n+t.loopedSlides,0,!1):t.slideTo(n,0,!1)}.bind(e),removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}.bind(e)})},function(e){var o=e.swiper,t=e.extendParams,e=e.on;t({fadeEffect:{crossFade:!1,transformEl:null}}),N({effect:"fade",swiper:o,on:e,setTranslate:function(){for(var e=o.slides,t=o.params.fadeEffect,a=0;a<e.length;a+=1){var r=o.slides.eq(a),i=-r[0].swiperSlideOffset;o.params.virtualTranslate||(i-=o.translate);var s=0;o.isHorizontal()||(s=i,i=0);var n=o.params.fadeEffect.crossFade?Math.max(1-Math.abs(r[0].progress),0):1+Math.min(Math.max(r[0].progress,-1),0);G(t,r).css({opacity:n}).transform("translate3d(".concat(i,"px, ").concat(s,"px, 0px)"))}},setTransition:function(e){var t=o.params.fadeEffect.transformEl;(t?o.slides.find(t):o.slides).transition(e),B({swiper:o,duration:e,transformEl:t,allSlides:!0})},overwriteParams:function(){return{slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!o.params.cssMode}}})},function(e){var T=e.swiper,t=e.extendParams,e=e.on;t({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}}),N({effect:"cube",swiper:T,on:e,setTranslate:function(){var e,t=T.$el,a=T.$wrapperEl,r=T.slides,i=T.width,s=T.height,n=T.rtlTranslate,o=T.size,l=T.browser,d=T.params.cubeEffect,c=T.isHorizontal(),p=T.virtual&&T.params.virtual.enabled,u=0;d.shadow&&(c?(0===(e=a.find(".swiper-cube-shadow")).length&&(e=I('<div class="swiper-cube-shadow"></div>'),a.append(e)),e.css({height:"".concat(i,"px")})):0===(e=t.find(".swiper-cube-shadow")).length&&(e=I('<div class="swiper-cube-shadow"></div>'),t.append(e)));for(var f,h=0;h<r.length;h+=1){var m=r.eq(h),v=h,g=90*(v=p?parseInt(m.attr("data-swiper-slide-index"),10):v),w=Math.floor(g/360);n&&(g=-g,w=Math.floor(-g/360));var b=Math.max(Math.min(m[0].progress,1),-1),y=0,x=0,E=0;v%4==0?(y=4*-w*o,E=0):(v-1)%4==0?(y=0,E=4*-w*o):(v-2)%4==0?(y=o+4*w*o,E=o):(v-3)%4==0&&(y=-o,E=3*o+4*o*w),n&&(y=-y),c||(x=y,y=0);var E="rotateX(".concat(c?0:-g,"deg) rotateY(").concat(c?g:0,"deg) translate3d(").concat(y,"px, ").concat(x,"px, ").concat(E,"px)");b<=1&&-1<b&&(u=n?90*-v-90*b:90*v+90*b),m.transform(E),d.slideShadows&&(v=c?m.find(".swiper-slide-shadow-left"):m.find(".swiper-slide-shadow-top"),E=c?m.find(".swiper-slide-shadow-right"):m.find(".swiper-slide-shadow-bottom"),0===v.length&&(v=I('<div class="swiper-slide-shadow-'.concat(c?"left":"top",'"></div>')),m.append(v)),0===E.length&&(E=I('<div class="swiper-slide-shadow-'.concat(c?"right":"bottom",'"></div>')),m.append(E)),v.length&&(v[0].style.opacity=Math.max(-b,0)),E.length&&(E[0].style.opacity=Math.max(b,0)))}a.css({"-webkit-transform-origin":"50% 50% -".concat(o/2,"px"),"transform-origin":"50% 50% -".concat(o/2,"px")}),d.shadow&&(c?e.transform("translate3d(0px, ".concat(i/2+d.shadowOffset,"px, ").concat(-i/2,"px) rotateX(90deg) rotateZ(0deg) scale(").concat(d.shadowScale,")")):(f=Math.abs(u)-90*Math.floor(Math.abs(u)/90),t=1.5-(Math.sin(2*f*Math.PI/360)/2+Math.cos(2*f*Math.PI/360)/2),i=d.shadowScale,f=d.shadowScale/t,t=d.shadowOffset,e.transform("scale3d(".concat(i,", 1, ").concat(f,") translate3d(0px, ").concat(s/2+t,"px, ").concat(-s/2/f,"px) rotateX(-90deg)"))));l=l.isSafari||l.isWebView?-o/2:0;a.transform("translate3d(0px,0,".concat(l,"px) rotateX(").concat(T.isHorizontal()?0:u,"deg) rotateY(").concat(T.isHorizontal()?-u:0,"deg)"))},setTransition:function(e){var t=T.$el;T.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),T.params.cubeEffect.shadow&&!T.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)},perspective:function(){return!0},overwriteParams:function(){return{slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0}}})},function(e){var u=e.swiper,t=e.extendParams,e=e.on;t({flipEffect:{slideShadows:!0,limitRotation:!0,transformEl:null}}),N({effect:"flip",swiper:u,on:e,setTranslate:function(){for(var e=u.slides,t=u.rtlTranslate,a=u.params.flipEffect,r=0;r<e.length;r+=1){var i=e.eq(r),s=i[0].progress;u.params.flipEffect.limitRotation&&(s=Math.max(Math.min(i[0].progress,1),-1));var n,o=i[0].swiperSlideOffset,l=-180*s,d=0,c=u.params.cssMode?-o-u.translate:-o,p=0;u.isHorizontal()?t&&(l=-l):(p=c,d=-l,l=c=0),i[0].style.zIndex=-Math.abs(Math.round(s))+e.length,a.slideShadows&&(n=u.isHorizontal()?i.find(".swiper-slide-shadow-left"):i.find(".swiper-slide-shadow-top"),o=u.isHorizontal()?i.find(".swiper-slide-shadow-right"):i.find(".swiper-slide-shadow-bottom"),0===n.length&&(n=H(a,i,u.isHorizontal()?"left":"top")),0===o.length&&(o=H(a,i,u.isHorizontal()?"right":"bottom")),n.length&&(n[0].style.opacity=Math.max(-s,0)),o.length&&(o[0].style.opacity=Math.max(s,0)));l="translate3d(".concat(c,"px, ").concat(p,"px, 0px) rotateX(").concat(d,"deg) rotateY(").concat(l,"deg)");G(a,i).transform(l)}},setTransition:function(e){var t=u.params.flipEffect.transformEl;(t?u.slides.find(t):u.slides).transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),B({swiper:u,duration:e,transformEl:t})},perspective:function(){return!0},overwriteParams:function(){return{slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!u.params.cssMode}}})},function(e){var y=e.swiper,t=e.extendParams,e=e.on;t({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0,transformEl:null}}),N({effect:"coverflow",swiper:y,on:e,setTranslate:function(){for(var e=y.width,t=y.height,a=y.slides,r=y.slidesSizesGrid,i=y.params.coverflowEffect,s=y.isHorizontal(),n=y.translate,o=s?e/2-n:t/2-n,l=s?i.rotate:-i.rotate,d=i.depth,c=0,p=a.length;c<p;c+=1){var u=a.eq(c),f=r[c],h=(o-u[0].swiperSlideOffset-f/2)/f*i.modifier,m=s?l*h:0,v=s?0:l*h,g=-d*Math.abs(h),w=i.stretch;"string"==typeof w&&-1!==w.indexOf("%")&&(w=parseFloat(i.stretch)/100*f);var b=s?0:w*h,f=s?w*h:0,w=1-(1-i.scale)*Math.abs(h);Math.abs(f)<.001&&(f=0),Math.abs(b)<.001&&(b=0),Math.abs(g)<.001&&(g=0),Math.abs(m)<.001&&(m=0),Math.abs(v)<.001&&(v=0),Math.abs(w)<.001&&(w=0);var m="translate3d(".concat(f,"px,").concat(b,"px,").concat(g,"px)  rotateX(").concat(v,"deg) rotateY(").concat(m,"deg) scale(").concat(w,")");G(i,u).transform(m),u[0].style.zIndex=1-Math.abs(Math.round(h)),i.slideShadows&&(w=s?u.find(".swiper-slide-shadow-left"):u.find(".swiper-slide-shadow-top"),m=s?u.find(".swiper-slide-shadow-right"):u.find(".swiper-slide-shadow-bottom"),0===w.length&&(w=H(i,u,s?"left":"top")),0===m.length&&(m=H(i,u,s?"right":"bottom")),w.length&&(w[0].style.opacity=0<h?h:0),m.length&&(m[0].style.opacity=0<-h?-h:0))}},setTransition:function(e){var t=y.params.coverflowEffect.transformEl;(t?y.slides.find(t):y.slides).transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)},perspective:function(){return!0},overwriteParams:function(){return{watchSlidesProgress:!0}}})},function(e){var h=e.swiper,t=e.extendParams,e=e.on;t({creativeEffect:{transformEl:null,limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}}),N({effect:"creative",swiper:h,on:e,setTranslate:function(){var c=h.slides,e=h.$wrapperEl,t=h.slidesSizesGrid,p=h.params.creativeEffect,u=p.progressMultiplier,f=h.params.centeredSlides;f&&(t=t[0]/2-h.params.slidesOffsetBefore||0,e.transform("translateX(calc(50% - ".concat(t,"px))")));for(var a=function(e){var t=c.eq(e),a=t[0].progress,r=Math.min(Math.max(t[0].progress,-p.limitProgress),p.limitProgress),i=r;f||(i=Math.min(Math.max(t[0].originalProgress,-p.limitProgress),p.limitProgress));var s=t[0].swiperSlideOffset,n=[h.params.cssMode?-s-h.translate:-s,0,0],o=[0,0,0],l=!1;h.isHorizontal()||(n[1]=n[0],n[0]=0);var d={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};r<0?(d=p.next,l=!0):0<r&&(d=p.prev,l=!0),n.forEach(function(e,t){n[t]="calc(".concat(e,"px + (").concat("string"==typeof(t=d.translate[t])?t:"".concat(t,"px")," * ").concat(Math.abs(r*u),"))")}),o.forEach(function(e,t){o[t]=d.rotate[t]*Math.abs(r*u)}),t[0].style.zIndex=-Math.abs(Math.round(a))+c.length;var e=n.join(", "),s="rotateX(".concat(o[0],"deg) rotateY(").concat(o[1],"deg) rotateZ(").concat(o[2],"deg)"),a="scale(".concat(i<0?1+(1-d.scale)*i*u:1-(1-d.scale)*i*u,")"),i=i<0?1+(1-d.opacity)*i*u:1-(1-d.opacity)*i*u,s="translate3d(".concat(e,") ").concat(s," ").concat(a);!(l&&d.shadow||!l)||(a=0===(a=t.children(".swiper-slide-shadow")).length&&d.shadow?H(p,t):a).length&&(l=p.shadowPerProgress?r*(1/p.limitProgress):r,a[0].style.opacity=Math.min(Math.max(Math.abs(l),0),1));t=G(p,t);t.transform(s).css({opacity:i}),d.origin&&t.css("transform-origin",d.origin)},r=0;r<c.length;r+=1)a(r)},setTransition:function(e){var t=h.params.creativeEffect.transformEl;(t?h.slides.find(t):h.slides).transition(e).find(".swiper-slide-shadow").transition(e),B({swiper:h,duration:e,transformEl:t,allSlides:!0})},perspective:function(){return h.params.creativeEffect.perspective},overwriteParams:function(){return{watchSlidesProgress:!0,virtualTranslate:!h.params.cssMode}}})},function(e){var b=e.swiper,t=e.extendParams,e=e.on;t({cardsEffect:{slideShadows:!0,transformEl:null}}),N({effect:"cards",swiper:b,on:e,setTranslate:function(){for(var e=b.slides,t=b.activeIndex,a=b.params.cardsEffect,r=b.touchEventsData,i=r.startTranslate,s=r.isTouched,n=b.translate,o=0;o<e.length;o+=1){var l=e.eq(o),d=l[0].progress,c=Math.min(Math.max(d,-4),4),p=l[0].swiperSlideOffset;b.params.centeredSlides&&!b.params.cssMode&&b.$wrapperEl.transform("translateX(".concat(b.minTranslate(),"px)")),b.params.centeredSlides&&b.params.cssMode&&(p-=e[0].swiperSlideOffset);var u=b.params.cssMode?-p-b.translate:-p,f=0,h=-100*Math.abs(c),m=1,v=-2*c,g=8-.75*Math.abs(c),w=(o===t||o===t-1)&&0<c&&c<1&&(s||b.params.cssMode)&&n<i,p=(o===t||o===t+1)&&c<0&&-1<c&&(s||b.params.cssMode)&&i<n;(w||p)&&(v+=-28*c*(p=Math.pow(1-Math.abs((Math.abs(c)-.5)/.5),.5)),m+=-.5*p,g+=96*p,f="".concat(-25*p*Math.abs(c),"%")),u=c<0?"calc(".concat(u,"px + (").concat(g*Math.abs(c),"%))"):0<c?"calc(".concat(u,"px + (-").concat(g*Math.abs(c),"%))"):"".concat(u,"px"),b.isHorizontal()||(g=f,f=u,u=g);var m="".concat(c<0?1+(1-m)*c:1-(1-m)*c),v="\n        translate3d(".concat(u,", ").concat(f,", ").concat(h,"px)\n        rotateZ(").concat(v,"deg)\n        scale(").concat(m,")\n      ");!a.slideShadows||(m=0===(m=l.find(".swiper-slide-shadow")).length?H(a,l):m).length&&(m[0].style.opacity=Math.min(Math.max((Math.abs(c)-.5)/.5,0),1)),l[0].style.zIndex=-Math.abs(Math.round(d))+e.length,G(a,l).transform(v)}},setTransition:function(e){var t=b.params.cardsEffect.transformEl;(t?b.slides.find(t):b.slides).transition(e).find(".swiper-slide-shadow").transition(e),B({swiper:b,duration:e,transformEl:t})},perspective:function(){return!0},overwriteParams:function(){return{watchSlidesProgress:!0,virtualTranslate:!b.params.cssMode}}})}]),A});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,